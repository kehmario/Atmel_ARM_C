
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f6c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  00001f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b0  20000014  00001f80  00020014  2**2
                  ALLOC
  3 .stack        00000404  200002c4  00002230  00020014  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002a063  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003dbc  00000000  00000000  0004a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000004f0  00000000  00000000  0004deb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000678  00000000  00000000  0004e3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00006198  00000000  00000000  0004ea1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c209  00000000  00000000  00054bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000716d4  00000000  00000000  00060dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000bc8  00000000  00000000  000d2494  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000517b  00000000  00000000  000d305c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 06 00 20 d1 17 00 00 cd 17 00 00 cd 17 00 00     ... ............
	...
      2c:	cd 17 00 00 00 00 00 00 00 00 00 00 cd 17 00 00     ................
      3c:	cd 17 00 00 cd 17 00 00 cd 17 00 00 cd 17 00 00     ................
      4c:	cd 17 00 00 c9 06 00 00 cd 17 00 00 cd 17 00 00     ................
      5c:	00 00 00 00 cd 17 00 00 e1 0a 00 00 f1 0a 00 00     ................
      6c:	01 0b 00 00 cd 17 00 00 ad 17 00 00 bd 17 00 00     ................
      7c:	05 06 00 00 cd 17 00 00 cd 17 00 00 cd 17 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000014 	.word	0x20000014
      ac:	00000000 	.word	0x00000000
      b0:	00001f6c 	.word	0x00001f6c

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000018 	.word	0x20000018
      e0:	00001f6c 	.word	0x00001f6c
      e4:	00001f6c 	.word	0x00001f6c
      e8:	00000000 	.word	0x00000000

000000ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
      ec:	4b0c      	ldr	r3, [pc, #48]	; (120 <cpu_irq_enter_critical+0x34>)
      ee:	681b      	ldr	r3, [r3, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d106      	bne.n	102 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
      f4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
      f8:	2b00      	cmp	r3, #0
      fa:	d007      	beq.n	10c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
      fc:	2200      	movs	r2, #0
      fe:	4b09      	ldr	r3, [pc, #36]	; (124 <cpu_irq_enter_critical+0x38>)
     100:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     102:	4a07      	ldr	r2, [pc, #28]	; (120 <cpu_irq_enter_critical+0x34>)
     104:	6813      	ldr	r3, [r2, #0]
     106:	3301      	adds	r3, #1
     108:	6013      	str	r3, [r2, #0]
}
     10a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     10c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     10e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     112:	2200      	movs	r2, #0
     114:	4b04      	ldr	r3, [pc, #16]	; (128 <cpu_irq_enter_critical+0x3c>)
     116:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     118:	3201      	adds	r2, #1
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <cpu_irq_enter_critical+0x38>)
     11c:	701a      	strb	r2, [r3, #0]
     11e:	e7f0      	b.n	102 <cpu_irq_enter_critical+0x16>
     120:	20000030 	.word	0x20000030
     124:	20000034 	.word	0x20000034
     128:	20000000 	.word	0x20000000

0000012c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     12c:	4b08      	ldr	r3, [pc, #32]	; (150 <cpu_irq_leave_critical+0x24>)
     12e:	681a      	ldr	r2, [r3, #0]
     130:	3a01      	subs	r2, #1
     132:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     134:	681b      	ldr	r3, [r3, #0]
     136:	2b00      	cmp	r3, #0
     138:	d109      	bne.n	14e <cpu_irq_leave_critical+0x22>
     13a:	4b06      	ldr	r3, [pc, #24]	; (154 <cpu_irq_leave_critical+0x28>)
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b00      	cmp	r3, #0
     140:	d005      	beq.n	14e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     142:	2201      	movs	r2, #1
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <cpu_irq_leave_critical+0x2c>)
     146:	701a      	strb	r2, [r3, #0]
     148:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     14c:	b662      	cpsie	i
	}
}
     14e:	4770      	bx	lr
     150:	20000030 	.word	0x20000030
     154:	20000034 	.word	0x20000034
     158:	20000000 	.word	0x20000000

0000015c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     160:	ac01      	add	r4, sp, #4
     162:	2501      	movs	r5, #1
     164:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     166:	2700      	movs	r7, #0
     168:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     16a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     16c:	0021      	movs	r1, r4
     16e:	2009      	movs	r0, #9
     170:	4e06      	ldr	r6, [pc, #24]	; (18c <system_board_init+0x30>)
     172:	47b0      	blx	r6

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     174:	2280      	movs	r2, #128	; 0x80
     176:	0092      	lsls	r2, r2, #2
     178:	4b05      	ldr	r3, [pc, #20]	; (190 <system_board_init+0x34>)
     17a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     17c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     17e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     180:	0021      	movs	r1, r4
     182:	2019      	movs	r0, #25
     184:	47b0      	blx	r6
}
     186:	b003      	add	sp, #12
     188:	bdf0      	pop	{r4, r5, r6, r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	000007a1 	.word	0x000007a1
     190:	41004400 	.word	0x41004400

00000194 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     194:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     196:	2200      	movs	r2, #0
     198:	2300      	movs	r3, #0
     19a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     19c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     19e:	2100      	movs	r1, #0
     1a0:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1a2:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1a4:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1a6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     1a8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1aa:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1ac:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1ae:	24c0      	movs	r4, #192	; 0xc0
     1b0:	0164      	lsls	r4, r4, #5
     1b2:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1b4:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1b6:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1b8:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     1ba:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1bc:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1be:	242a      	movs	r4, #42	; 0x2a
     1c0:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     1c2:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1c4:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1c6:	3c06      	subs	r4, #6
     1c8:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1ca:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1cc:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     1ce:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     1d0:	232b      	movs	r3, #43	; 0x2b
     1d2:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     1d4:	3301      	adds	r3, #1
     1d6:	54c1      	strb	r1, [r0, r3]
}
     1d8:	bd10      	pop	{r4, pc}
	...

000001dc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     1de:	46d6      	mov	lr, sl
     1e0:	464f      	mov	r7, r9
     1e2:	4646      	mov	r6, r8
     1e4:	b5c0      	push	{r6, r7, lr}
     1e6:	b096      	sub	sp, #88	; 0x58
     1e8:	0007      	movs	r7, r0
     1ea:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1ec:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1ee:	4ac6      	ldr	r2, [pc, #792]	; (508 <STACK_SIZE+0x108>)
     1f0:	6a10      	ldr	r0, [r2, #32]
     1f2:	2380      	movs	r3, #128	; 0x80
     1f4:	005b      	lsls	r3, r3, #1
     1f6:	4303      	orrs	r3, r0
     1f8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1fa:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1fc:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1fe:	07db      	lsls	r3, r3, #31
     200:	d505      	bpl.n	20e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     202:	b016      	add	sp, #88	; 0x58
     204:	bc1c      	pop	{r2, r3, r4}
     206:	4690      	mov	r8, r2
     208:	4699      	mov	r9, r3
     20a:	46a2      	mov	sl, r4
     20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     20e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     210:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     212:	079b      	lsls	r3, r3, #30
     214:	d4f5      	bmi.n	202 <adc_init+0x26>
	module_inst->reference = config->reference;
     216:	7873      	ldrb	r3, [r6, #1]
     218:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     21a:	2b00      	cmp	r3, #0
     21c:	d104      	bne.n	228 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     21e:	4abb      	ldr	r2, [pc, #748]	; (50c <STACK_SIZE+0x10c>)
     220:	6c13      	ldr	r3, [r2, #64]	; 0x40
     222:	2104      	movs	r1, #4
     224:	430b      	orrs	r3, r1
     226:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     228:	2300      	movs	r3, #0
     22a:	60bb      	str	r3, [r7, #8]
     22c:	60fb      	str	r3, [r7, #12]
     22e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     230:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     232:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     234:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     236:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     238:	4bb5      	ldr	r3, [pc, #724]	; (510 <STACK_SIZE+0x110>)
     23a:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     23c:	232a      	movs	r3, #42	; 0x2a
     23e:	5cf3      	ldrb	r3, [r6, r3]
     240:	2b00      	cmp	r3, #0
     242:	d105      	bne.n	250 <adc_init+0x74>
     244:	7d33      	ldrb	r3, [r6, #20]
     246:	2b00      	cmp	r3, #0
     248:	d102      	bne.n	250 <adc_init+0x74>
		module_inst->software_trigger = true;
     24a:	3301      	adds	r3, #1
     24c:	777b      	strb	r3, [r7, #29]
     24e:	e001      	b.n	254 <adc_init+0x78>
		module_inst->software_trigger = false;
     250:	2300      	movs	r3, #0
     252:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     254:	683b      	ldr	r3, [r7, #0]
     256:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     258:	7833      	ldrb	r3, [r6, #0]
     25a:	466a      	mov	r2, sp
     25c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     25e:	4669      	mov	r1, sp
     260:	2013      	movs	r0, #19
     262:	4bac      	ldr	r3, [pc, #688]	; (514 <STACK_SIZE+0x114>)
     264:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     266:	2013      	movs	r0, #19
     268:	4bab      	ldr	r3, [pc, #684]	; (518 <STACK_SIZE+0x118>)
     26a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     26c:	232c      	movs	r3, #44	; 0x2c
     26e:	5cf2      	ldrb	r2, [r6, r3]
     270:	2a00      	cmp	r2, #0
     272:	d054      	beq.n	31e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     274:	3b01      	subs	r3, #1
     276:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     278:	7b33      	ldrb	r3, [r6, #12]
     27a:	18eb      	adds	r3, r5, r3
     27c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     27e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     280:	b2c9      	uxtb	r1, r1
     282:	428b      	cmp	r3, r1
     284:	d221      	bcs.n	2ca <adc_init+0xee>
     286:	1952      	adds	r2, r2, r5
     288:	b2d3      	uxtb	r3, r2
     28a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     28c:	4ba3      	ldr	r3, [pc, #652]	; (51c <STACK_SIZE+0x11c>)
     28e:	469a      	mov	sl, r3
     290:	e003      	b.n	29a <adc_init+0xbe>
			offset++;
     292:	3501      	adds	r5, #1
     294:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     296:	454d      	cmp	r5, r9
     298:	d017      	beq.n	2ca <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     29a:	240f      	movs	r4, #15
     29c:	402c      	ands	r4, r5
     29e:	7b33      	ldrb	r3, [r6, #12]
     2a0:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     2a2:	2250      	movs	r2, #80	; 0x50
     2a4:	499e      	ldr	r1, [pc, #632]	; (520 <STACK_SIZE+0x120>)
     2a6:	a802      	add	r0, sp, #8
     2a8:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2aa:	2c09      	cmp	r4, #9
     2ac:	d8f1      	bhi.n	292 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2ae:	00a4      	lsls	r4, r4, #2
     2b0:	ab02      	add	r3, sp, #8
     2b2:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2b4:	a901      	add	r1, sp, #4
     2b6:	2300      	movs	r3, #0
     2b8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2ba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2bc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2be:	3301      	adds	r3, #1
     2c0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2c2:	b2c0      	uxtb	r0, r0
     2c4:	4b97      	ldr	r3, [pc, #604]	; (524 <STACK_SIZE+0x124>)
     2c6:	4798      	blx	r3
     2c8:	e7e3      	b.n	292 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     2ca:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2cc:	2250      	movs	r2, #80	; 0x50
     2ce:	4994      	ldr	r1, [pc, #592]	; (520 <STACK_SIZE+0x120>)
     2d0:	a802      	add	r0, sp, #8
     2d2:	4b92      	ldr	r3, [pc, #584]	; (51c <STACK_SIZE+0x11c>)
     2d4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2d6:	2c09      	cmp	r4, #9
     2d8:	d913      	bls.n	302 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2da:	7d73      	ldrb	r3, [r6, #21]
     2dc:	009b      	lsls	r3, r3, #2
     2de:	b2db      	uxtb	r3, r3
     2e0:	4642      	mov	r2, r8
     2e2:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2e4:	7db3      	ldrb	r3, [r6, #22]
     2e6:	01db      	lsls	r3, r3, #7
     2e8:	7872      	ldrb	r2, [r6, #1]
     2ea:	4313      	orrs	r3, r2
     2ec:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2ee:	4642      	mov	r2, r8
     2f0:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     2f2:	7933      	ldrb	r3, [r6, #4]
     2f4:	2b34      	cmp	r3, #52	; 0x34
     2f6:	d900      	bls.n	2fa <adc_init+0x11e>
     2f8:	e17b      	b.n	5f2 <STACK_SIZE+0x1f2>
     2fa:	009b      	lsls	r3, r3, #2
     2fc:	4a8a      	ldr	r2, [pc, #552]	; (528 <STACK_SIZE+0x128>)
     2fe:	58d3      	ldr	r3, [r2, r3]
     300:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     302:	00a4      	lsls	r4, r4, #2
     304:	ab02      	add	r3, sp, #8
     306:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     308:	a901      	add	r1, sp, #4
     30a:	2300      	movs	r3, #0
     30c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     30e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     310:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     312:	3301      	adds	r3, #1
     314:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     316:	b2c0      	uxtb	r0, r0
     318:	4b82      	ldr	r3, [pc, #520]	; (524 <STACK_SIZE+0x124>)
     31a:	4798      	blx	r3
     31c:	e7dd      	b.n	2da <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     31e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     320:	2250      	movs	r2, #80	; 0x50
     322:	497f      	ldr	r1, [pc, #508]	; (520 <STACK_SIZE+0x120>)
     324:	a802      	add	r0, sp, #8
     326:	4b7d      	ldr	r3, [pc, #500]	; (51c <STACK_SIZE+0x11c>)
     328:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     32a:	2c09      	cmp	r4, #9
     32c:	d915      	bls.n	35a <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     32e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     330:	2250      	movs	r2, #80	; 0x50
     332:	497b      	ldr	r1, [pc, #492]	; (520 <STACK_SIZE+0x120>)
     334:	a802      	add	r0, sp, #8
     336:	4b79      	ldr	r3, [pc, #484]	; (51c <STACK_SIZE+0x11c>)
     338:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     33a:	2c09      	cmp	r4, #9
     33c:	d8cd      	bhi.n	2da <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     33e:	00a4      	lsls	r4, r4, #2
     340:	ab02      	add	r3, sp, #8
     342:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     344:	a901      	add	r1, sp, #4
     346:	2300      	movs	r3, #0
     348:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     34a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     34c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     34e:	3301      	adds	r3, #1
     350:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     352:	b2c0      	uxtb	r0, r0
     354:	4b73      	ldr	r3, [pc, #460]	; (524 <STACK_SIZE+0x124>)
     356:	4798      	blx	r3
     358:	e7bf      	b.n	2da <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     35a:	00a4      	lsls	r4, r4, #2
     35c:	ab02      	add	r3, sp, #8
     35e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     360:	a901      	add	r1, sp, #4
     362:	2300      	movs	r3, #0
     364:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     366:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     368:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     36a:	3301      	adds	r3, #1
     36c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     36e:	b2c0      	uxtb	r0, r0
     370:	4b6c      	ldr	r3, [pc, #432]	; (524 <STACK_SIZE+0x124>)
     372:	4798      	blx	r3
     374:	e7db      	b.n	32e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     376:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     378:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     37a:	2102      	movs	r1, #2
     37c:	e01a      	b.n	3b4 <adc_init+0x1d8>
		adjres = config->divide_result;
     37e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     380:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     382:	2410      	movs	r4, #16
     384:	e016      	b.n	3b4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     386:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     388:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     38a:	2101      	movs	r1, #1
     38c:	e012      	b.n	3b4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     38e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     390:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     392:	2100      	movs	r1, #0
     394:	e00e      	b.n	3b4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     396:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     398:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     39a:	2100      	movs	r1, #0
     39c:	e00a      	b.n	3b4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     39e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     3a0:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     3a2:	2100      	movs	r1, #0
     3a4:	e006      	b.n	3b4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3a6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     3a8:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     3aa:	2100      	movs	r1, #0
     3ac:	e002      	b.n	3b4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     3ae:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     3b0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3b2:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     3b4:	0109      	lsls	r1, r1, #4
     3b6:	2270      	movs	r2, #112	; 0x70
     3b8:	400a      	ands	r2, r1
     3ba:	4313      	orrs	r3, r2
     3bc:	4642      	mov	r2, r8
     3be:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     3c0:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     3c2:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     3c4:	2b3f      	cmp	r3, #63	; 0x3f
     3c6:	d900      	bls.n	3ca <adc_init+0x1ee>
     3c8:	e71b      	b.n	202 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     3ca:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     3cc:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3ce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3d0:	b25b      	sxtb	r3, r3
     3d2:	2b00      	cmp	r3, #0
     3d4:	dbfb      	blt.n	3ce <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     3d6:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3d8:	8872      	ldrh	r2, [r6, #2]
     3da:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3dc:	2224      	movs	r2, #36	; 0x24
     3de:	5cb2      	ldrb	r2, [r6, r2]
     3e0:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3e2:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3e4:	7d32      	ldrb	r2, [r6, #20]
     3e6:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3e8:	4313      	orrs	r3, r2
     3ea:	7cb2      	ldrb	r2, [r6, #18]
     3ec:	0052      	lsls	r2, r2, #1
     3ee:	4313      	orrs	r3, r2
     3f0:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     3f2:	4642      	mov	r2, r8
     3f4:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3f6:	7e33      	ldrb	r3, [r6, #24]
     3f8:	2b00      	cmp	r3, #0
     3fa:	d020      	beq.n	43e <STACK_SIZE+0x3e>
		switch (resolution) {
     3fc:	2c10      	cmp	r4, #16
     3fe:	d100      	bne.n	402 <STACK_SIZE+0x2>
     400:	e0d9      	b.n	5b6 <STACK_SIZE+0x1b6>
     402:	d800      	bhi.n	406 <STACK_SIZE+0x6>
     404:	e098      	b.n	538 <STACK_SIZE+0x138>
     406:	2c20      	cmp	r4, #32
     408:	d100      	bne.n	40c <STACK_SIZE+0xc>
     40a:	e0b6      	b.n	57a <STACK_SIZE+0x17a>
     40c:	2c30      	cmp	r4, #48	; 0x30
     40e:	d116      	bne.n	43e <STACK_SIZE+0x3e>
			if (config->differential_mode &&
     410:	7cf2      	ldrb	r2, [r6, #19]
     412:	2a00      	cmp	r2, #0
     414:	d00a      	beq.n	42c <STACK_SIZE+0x2c>
					(config->window.window_lower_value > 127 ||
     416:	69f2      	ldr	r2, [r6, #28]
     418:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     41a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     41c:	2aff      	cmp	r2, #255	; 0xff
     41e:	d900      	bls.n	422 <STACK_SIZE+0x22>
     420:	e6ef      	b.n	202 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     422:	6a32      	ldr	r2, [r6, #32]
     424:	3280      	adds	r2, #128	; 0x80
     426:	2aff      	cmp	r2, #255	; 0xff
     428:	d900      	bls.n	42c <STACK_SIZE+0x2c>
     42a:	e6ea      	b.n	202 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     42c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     42e:	69f2      	ldr	r2, [r6, #28]
     430:	2aff      	cmp	r2, #255	; 0xff
     432:	dd00      	ble.n	436 <STACK_SIZE+0x36>
     434:	e6e5      	b.n	202 <adc_init+0x26>
     436:	6a32      	ldr	r2, [r6, #32]
     438:	2aff      	cmp	r2, #255	; 0xff
     43a:	dd00      	ble.n	43e <STACK_SIZE+0x3e>
     43c:	e6e1      	b.n	202 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     43e:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     440:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     442:	b252      	sxtb	r2, r2
     444:	2a00      	cmp	r2, #0
     446:	dbfb      	blt.n	440 <STACK_SIZE+0x40>
	adc_module->WINCTRL.reg = config->window.window_mode;
     448:	4642      	mov	r2, r8
     44a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     44c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     44e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     450:	b25b      	sxtb	r3, r3
     452:	2b00      	cmp	r3, #0
     454:	dbfb      	blt.n	44e <STACK_SIZE+0x4e>
	adc_module->WINLT.reg =
     456:	8bb3      	ldrh	r3, [r6, #28]
     458:	4642      	mov	r2, r8
     45a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     45c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     45e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     460:	b25b      	sxtb	r3, r3
     462:	2b00      	cmp	r3, #0
     464:	dbfb      	blt.n	45e <STACK_SIZE+0x5e>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     466:	8c33      	ldrh	r3, [r6, #32]
     468:	4642      	mov	r2, r8
     46a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     46c:	232c      	movs	r3, #44	; 0x2c
     46e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     470:	2b00      	cmp	r3, #0
     472:	d005      	beq.n	480 <STACK_SIZE+0x80>
		inputs_to_scan--;
     474:	3b01      	subs	r3, #1
     476:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     478:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     47a:	2b0f      	cmp	r3, #15
     47c:	d900      	bls.n	480 <STACK_SIZE+0x80>
     47e:	e6c0      	b.n	202 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     480:	222b      	movs	r2, #43	; 0x2b
     482:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     484:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     486:	290f      	cmp	r1, #15
     488:	d900      	bls.n	48c <STACK_SIZE+0x8c>
     48a:	e6ba      	b.n	202 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     48c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     48e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     490:	b252      	sxtb	r2, r2
     492:	2a00      	cmp	r2, #0
     494:	dbfb      	blt.n	48e <STACK_SIZE+0x8e>
			config->negative_input |
     496:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     498:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     49a:	4302      	orrs	r2, r0
     49c:	68b0      	ldr	r0, [r6, #8]
     49e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     4a0:	0509      	lsls	r1, r1, #20
			config->negative_input |
     4a2:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4a4:	041b      	lsls	r3, r3, #16
			config->negative_input |
     4a6:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     4a8:	4642      	mov	r2, r8
     4aa:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     4ac:	232a      	movs	r3, #42	; 0x2a
     4ae:	5cf3      	ldrb	r3, [r6, r3]
     4b0:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     4b2:	230f      	movs	r3, #15
     4b4:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     4b6:	3315      	adds	r3, #21
     4b8:	5cf3      	ldrb	r3, [r6, r3]
     4ba:	2b00      	cmp	r3, #0
     4bc:	d012      	beq.n	4e4 <STACK_SIZE+0xe4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4be:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     4c0:	4a1a      	ldr	r2, [pc, #104]	; (52c <STACK_SIZE+0x12c>)
			return STATUS_ERR_INVALID_ARG;
     4c2:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4c4:	4293      	cmp	r3, r2
     4c6:	d900      	bls.n	4ca <STACK_SIZE+0xca>
     4c8:	e69b      	b.n	202 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     4ca:	4642      	mov	r2, r8
     4cc:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     4ce:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     4d0:	2380      	movs	r3, #128	; 0x80
     4d2:	011b      	lsls	r3, r3, #4
     4d4:	18d3      	adds	r3, r2, r3
     4d6:	4915      	ldr	r1, [pc, #84]	; (52c <STACK_SIZE+0x12c>)
     4d8:	b29b      	uxth	r3, r3
     4da:	428b      	cmp	r3, r1
     4dc:	d900      	bls.n	4e0 <STACK_SIZE+0xe0>
     4de:	e690      	b.n	202 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4e0:	4643      	mov	r3, r8
     4e2:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4e4:	4b12      	ldr	r3, [pc, #72]	; (530 <STACK_SIZE+0x130>)
     4e6:	681b      	ldr	r3, [r3, #0]
     4e8:	015b      	lsls	r3, r3, #5
     4ea:	22e0      	movs	r2, #224	; 0xe0
     4ec:	00d2      	lsls	r2, r2, #3
     4ee:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     4f0:	4a10      	ldr	r2, [pc, #64]	; (534 <STACK_SIZE+0x134>)
     4f2:	6851      	ldr	r1, [r2, #4]
     4f4:	0149      	lsls	r1, r1, #5
     4f6:	6812      	ldr	r2, [r2, #0]
     4f8:	0ed2      	lsrs	r2, r2, #27
     4fa:	430a      	orrs	r2, r1
     4fc:	b2d2      	uxtb	r2, r2
			) |
     4fe:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     500:	4642      	mov	r2, r8
     502:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     504:	2000      	movs	r0, #0
     506:	e67c      	b.n	202 <adc_init+0x26>
     508:	40000400 	.word	0x40000400
     50c:	40000800 	.word	0x40000800
     510:	20000064 	.word	0x20000064
     514:	000015f1 	.word	0x000015f1
     518:	00001565 	.word	0x00001565
     51c:	00001da5 	.word	0x00001da5
     520:	00001e8c 	.word	0x00001e8c
     524:	000016e9 	.word	0x000016e9
     528:	00001db8 	.word	0x00001db8
     52c:	00000fff 	.word	0x00000fff
     530:	00806024 	.word	0x00806024
     534:	00806020 	.word	0x00806020
		switch (resolution) {
     538:	2c00      	cmp	r4, #0
     53a:	d000      	beq.n	53e <STACK_SIZE+0x13e>
     53c:	e77f      	b.n	43e <STACK_SIZE+0x3e>
			if (config->differential_mode &&
     53e:	7cf2      	ldrb	r2, [r6, #19]
     540:	2a00      	cmp	r2, #0
     542:	d00f      	beq.n	564 <STACK_SIZE+0x164>
					(config->window.window_lower_value > 2047 ||
     544:	69f2      	ldr	r2, [r6, #28]
     546:	2180      	movs	r1, #128	; 0x80
     548:	0109      	lsls	r1, r1, #4
     54a:	468c      	mov	ip, r1
     54c:	4462      	add	r2, ip
			if (config->differential_mode &&
     54e:	492a      	ldr	r1, [pc, #168]	; (5f8 <STACK_SIZE+0x1f8>)
				return STATUS_ERR_INVALID_ARG;
     550:	2017      	movs	r0, #23
			if (config->differential_mode &&
     552:	428a      	cmp	r2, r1
     554:	d900      	bls.n	558 <STACK_SIZE+0x158>
     556:	e654      	b.n	202 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     558:	6a32      	ldr	r2, [r6, #32]
     55a:	4462      	add	r2, ip
     55c:	4926      	ldr	r1, [pc, #152]	; (5f8 <STACK_SIZE+0x1f8>)
     55e:	428a      	cmp	r2, r1
     560:	d900      	bls.n	564 <STACK_SIZE+0x164>
     562:	e64e      	b.n	202 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     564:	4a24      	ldr	r2, [pc, #144]	; (5f8 <STACK_SIZE+0x1f8>)
				return STATUS_ERR_INVALID_ARG;
     566:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     568:	69f1      	ldr	r1, [r6, #28]
     56a:	4291      	cmp	r1, r2
     56c:	dd00      	ble.n	570 <STACK_SIZE+0x170>
     56e:	e648      	b.n	202 <adc_init+0x26>
     570:	6a31      	ldr	r1, [r6, #32]
     572:	4291      	cmp	r1, r2
     574:	dd00      	ble.n	578 <STACK_SIZE+0x178>
     576:	e644      	b.n	202 <adc_init+0x26>
     578:	e761      	b.n	43e <STACK_SIZE+0x3e>
			if (config->differential_mode &&
     57a:	7cf2      	ldrb	r2, [r6, #19]
     57c:	2a00      	cmp	r2, #0
     57e:	d00f      	beq.n	5a0 <STACK_SIZE+0x1a0>
					(config->window.window_lower_value > 511 ||
     580:	69f2      	ldr	r2, [r6, #28]
     582:	2180      	movs	r1, #128	; 0x80
     584:	0089      	lsls	r1, r1, #2
     586:	468c      	mov	ip, r1
     588:	4462      	add	r2, ip
			if (config->differential_mode &&
     58a:	491c      	ldr	r1, [pc, #112]	; (5fc <STACK_SIZE+0x1fc>)
				return STATUS_ERR_INVALID_ARG;
     58c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     58e:	428a      	cmp	r2, r1
     590:	d900      	bls.n	594 <STACK_SIZE+0x194>
     592:	e636      	b.n	202 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     594:	6a32      	ldr	r2, [r6, #32]
     596:	4462      	add	r2, ip
     598:	4918      	ldr	r1, [pc, #96]	; (5fc <STACK_SIZE+0x1fc>)
     59a:	428a      	cmp	r2, r1
     59c:	d900      	bls.n	5a0 <STACK_SIZE+0x1a0>
     59e:	e630      	b.n	202 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     5a0:	4a16      	ldr	r2, [pc, #88]	; (5fc <STACK_SIZE+0x1fc>)
				return STATUS_ERR_INVALID_ARG;
     5a2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     5a4:	69f1      	ldr	r1, [r6, #28]
     5a6:	4291      	cmp	r1, r2
     5a8:	dd00      	ble.n	5ac <STACK_SIZE+0x1ac>
     5aa:	e62a      	b.n	202 <adc_init+0x26>
     5ac:	6a31      	ldr	r1, [r6, #32]
     5ae:	4291      	cmp	r1, r2
     5b0:	dd00      	ble.n	5b4 <STACK_SIZE+0x1b4>
     5b2:	e626      	b.n	202 <adc_init+0x26>
     5b4:	e743      	b.n	43e <STACK_SIZE+0x3e>
			if (config->differential_mode &&
     5b6:	7cf2      	ldrb	r2, [r6, #19]
     5b8:	2a00      	cmp	r2, #0
     5ba:	d00f      	beq.n	5dc <STACK_SIZE+0x1dc>
					(config->window.window_lower_value > 32767 ||
     5bc:	69f2      	ldr	r2, [r6, #28]
     5be:	2180      	movs	r1, #128	; 0x80
     5c0:	0209      	lsls	r1, r1, #8
     5c2:	468c      	mov	ip, r1
     5c4:	4462      	add	r2, ip
			if (config->differential_mode &&
     5c6:	490e      	ldr	r1, [pc, #56]	; (600 <STACK_SIZE+0x200>)
				return STATUS_ERR_INVALID_ARG;
     5c8:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5ca:	428a      	cmp	r2, r1
     5cc:	d900      	bls.n	5d0 <STACK_SIZE+0x1d0>
     5ce:	e618      	b.n	202 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     5d0:	6a32      	ldr	r2, [r6, #32]
     5d2:	4462      	add	r2, ip
     5d4:	490a      	ldr	r1, [pc, #40]	; (600 <STACK_SIZE+0x200>)
     5d6:	428a      	cmp	r2, r1
     5d8:	d900      	bls.n	5dc <STACK_SIZE+0x1dc>
     5da:	e612      	b.n	202 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     5dc:	4a08      	ldr	r2, [pc, #32]	; (600 <STACK_SIZE+0x200>)
				return STATUS_ERR_INVALID_ARG;
     5de:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     5e0:	69f1      	ldr	r1, [r6, #28]
     5e2:	4291      	cmp	r1, r2
     5e4:	dd00      	ble.n	5e8 <STACK_SIZE+0x1e8>
     5e6:	e60c      	b.n	202 <adc_init+0x26>
     5e8:	6a31      	ldr	r1, [r6, #32]
     5ea:	4291      	cmp	r1, r2
     5ec:	dd00      	ble.n	5f0 <STACK_SIZE+0x1f0>
     5ee:	e608      	b.n	202 <adc_init+0x26>
     5f0:	e725      	b.n	43e <STACK_SIZE+0x3e>
		return STATUS_ERR_INVALID_ARG;
     5f2:	2017      	movs	r0, #23
     5f4:	e605      	b.n	202 <adc_init+0x26>
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	00000fff 	.word	0x00000fff
     5fc:	000003ff 	.word	0x000003ff
     600:	0000ffff 	.word	0x0000ffff

00000604 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     604:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     606:	4b2f      	ldr	r3, [pc, #188]	; (6c4 <ADC_Handler+0xc0>)
     608:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     60a:	682b      	ldr	r3, [r5, #0]
     60c:	7e1a      	ldrb	r2, [r3, #24]
     60e:	7ddc      	ldrb	r4, [r3, #23]
     610:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     612:	07e2      	lsls	r2, r4, #31
     614:	d416      	bmi.n	644 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     616:	0763      	lsls	r3, r4, #29
     618:	d508      	bpl.n	62c <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     61a:	2304      	movs	r3, #4
     61c:	682a      	ldr	r2, [r5, #0]
     61e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     620:	7eeb      	ldrb	r3, [r5, #27]
     622:	079b      	lsls	r3, r3, #30
     624:	d502      	bpl.n	62c <ADC_Handler+0x28>
     626:	7eab      	ldrb	r3, [r5, #26]
     628:	079b      	lsls	r3, r3, #30
     62a:	d442      	bmi.n	6b2 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     62c:	07a3      	lsls	r3, r4, #30
     62e:	d508      	bpl.n	642 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     630:	2302      	movs	r3, #2
     632:	682a      	ldr	r2, [r5, #0]
     634:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     636:	7eeb      	ldrb	r3, [r5, #27]
     638:	075b      	lsls	r3, r3, #29
     63a:	d502      	bpl.n	642 <ADC_Handler+0x3e>
     63c:	7eab      	ldrb	r3, [r5, #26]
     63e:	075b      	lsls	r3, r3, #29
     640:	d43b      	bmi.n	6ba <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     642:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     644:	2201      	movs	r2, #1
     646:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     648:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     64a:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     64c:	b25b      	sxtb	r3, r3
     64e:	2b00      	cmp	r3, #0
     650:	dbfb      	blt.n	64a <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     652:	6969      	ldr	r1, [r5, #20]
     654:	1c8b      	adds	r3, r1, #2
     656:	616b      	str	r3, [r5, #20]
     658:	8b53      	ldrh	r3, [r2, #26]
     65a:	b29b      	uxth	r3, r3
     65c:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     65e:	8b2b      	ldrh	r3, [r5, #24]
     660:	3b01      	subs	r3, #1
     662:	b29b      	uxth	r3, r3
     664:	832b      	strh	r3, [r5, #24]
     666:	2b00      	cmp	r3, #0
     668:	d011      	beq.n	68e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     66a:	7f6b      	ldrb	r3, [r5, #29]
     66c:	2b00      	cmp	r3, #0
     66e:	d0d2      	beq.n	616 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     670:	682a      	ldr	r2, [r5, #0]
     672:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     674:	b25b      	sxtb	r3, r3
     676:	2b00      	cmp	r3, #0
     678:	dbfb      	blt.n	672 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     67a:	7b13      	ldrb	r3, [r2, #12]
     67c:	2102      	movs	r1, #2
     67e:	430b      	orrs	r3, r1
     680:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     682:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     684:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     686:	b25b      	sxtb	r3, r3
     688:	2b00      	cmp	r3, #0
     68a:	dbfb      	blt.n	684 <ADC_Handler+0x80>
     68c:	e7c3      	b.n	616 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     68e:	2301      	movs	r3, #1
     690:	682a      	ldr	r2, [r5, #0]
     692:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     694:	7f2b      	ldrb	r3, [r5, #28]
     696:	2b05      	cmp	r3, #5
     698:	d1bd      	bne.n	616 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     69a:	2300      	movs	r3, #0
     69c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     69e:	7eeb      	ldrb	r3, [r5, #27]
     6a0:	07db      	lsls	r3, r3, #31
     6a2:	d5b8      	bpl.n	616 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     6a4:	7eab      	ldrb	r3, [r5, #26]
     6a6:	07db      	lsls	r3, r3, #31
     6a8:	d5b5      	bpl.n	616 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     6aa:	0028      	movs	r0, r5
     6ac:	68ab      	ldr	r3, [r5, #8]
     6ae:	4798      	blx	r3
     6b0:	e7b1      	b.n	616 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     6b2:	0028      	movs	r0, r5
     6b4:	68eb      	ldr	r3, [r5, #12]
     6b6:	4798      	blx	r3
     6b8:	e7b8      	b.n	62c <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     6ba:	692b      	ldr	r3, [r5, #16]
     6bc:	0028      	movs	r0, r5
     6be:	4798      	blx	r3
}
     6c0:	e7bf      	b.n	642 <ADC_Handler+0x3e>
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	20000064 	.word	0x20000064

000006c8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     6c8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     6ca:	2200      	movs	r2, #0
     6cc:	4b10      	ldr	r3, [pc, #64]	; (710 <EIC_Handler+0x48>)
     6ce:	701a      	strb	r2, [r3, #0]
     6d0:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     6d2:	4910      	ldr	r1, [pc, #64]	; (714 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     6d4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     6d6:	4e10      	ldr	r6, [pc, #64]	; (718 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     6d8:	4c0d      	ldr	r4, [pc, #52]	; (710 <EIC_Handler+0x48>)
     6da:	e00a      	b.n	6f2 <EIC_Handler+0x2a>
		return eics[eic_index];
     6dc:	490d      	ldr	r1, [pc, #52]	; (714 <EIC_Handler+0x4c>)
     6de:	e008      	b.n	6f2 <EIC_Handler+0x2a>
     6e0:	7823      	ldrb	r3, [r4, #0]
     6e2:	3301      	adds	r3, #1
     6e4:	b2db      	uxtb	r3, r3
     6e6:	7023      	strb	r3, [r4, #0]
     6e8:	2b0f      	cmp	r3, #15
     6ea:	d810      	bhi.n	70e <EIC_Handler+0x46>
		return NULL;
     6ec:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     6ee:	2b1f      	cmp	r3, #31
     6f0:	d9f4      	bls.n	6dc <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     6f2:	0028      	movs	r0, r5
     6f4:	4018      	ands	r0, r3
     6f6:	2201      	movs	r2, #1
     6f8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     6fa:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     6fc:	4210      	tst	r0, r2
     6fe:	d0ef      	beq.n	6e0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     700:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     702:	009b      	lsls	r3, r3, #2
     704:	599b      	ldr	r3, [r3, r6]
     706:	2b00      	cmp	r3, #0
     708:	d0ea      	beq.n	6e0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     70a:	4798      	blx	r3
     70c:	e7e8      	b.n	6e0 <EIC_Handler+0x18>
			}
		}
	}
}
     70e:	bd70      	pop	{r4, r5, r6, pc}
     710:	20000068 	.word	0x20000068
     714:	40001800 	.word	0x40001800
     718:	2000006c 	.word	0x2000006c

0000071c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     71c:	4a04      	ldr	r2, [pc, #16]	; (730 <_extint_enable+0x14>)
     71e:	7813      	ldrb	r3, [r2, #0]
     720:	2102      	movs	r1, #2
     722:	430b      	orrs	r3, r1
     724:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     726:	7853      	ldrb	r3, [r2, #1]
     728:	b25b      	sxtb	r3, r3
     72a:	2b00      	cmp	r3, #0
     72c:	dbfb      	blt.n	726 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     72e:	4770      	bx	lr
     730:	40001800 	.word	0x40001800

00000734 <_system_extint_init>:
{
     734:	b500      	push	{lr}
     736:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     738:	4a12      	ldr	r2, [pc, #72]	; (784 <_system_extint_init+0x50>)
     73a:	6993      	ldr	r3, [r2, #24]
     73c:	2140      	movs	r1, #64	; 0x40
     73e:	430b      	orrs	r3, r1
     740:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     742:	a901      	add	r1, sp, #4
     744:	2300      	movs	r3, #0
     746:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     748:	2005      	movs	r0, #5
     74a:	4b0f      	ldr	r3, [pc, #60]	; (788 <_system_extint_init+0x54>)
     74c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     74e:	2005      	movs	r0, #5
     750:	4b0e      	ldr	r3, [pc, #56]	; (78c <_system_extint_init+0x58>)
     752:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     754:	4a0e      	ldr	r2, [pc, #56]	; (790 <_system_extint_init+0x5c>)
     756:	7813      	ldrb	r3, [r2, #0]
     758:	2101      	movs	r1, #1
     75a:	430b      	orrs	r3, r1
     75c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     75e:	7853      	ldrb	r3, [r2, #1]
     760:	b25b      	sxtb	r3, r3
     762:	2b00      	cmp	r3, #0
     764:	dbfb      	blt.n	75e <_system_extint_init+0x2a>
     766:	4b0b      	ldr	r3, [pc, #44]	; (794 <_system_extint_init+0x60>)
     768:	0019      	movs	r1, r3
     76a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     76c:	2200      	movs	r2, #0
     76e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     770:	4299      	cmp	r1, r3
     772:	d1fc      	bne.n	76e <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     774:	2210      	movs	r2, #16
     776:	4b08      	ldr	r3, [pc, #32]	; (798 <_system_extint_init+0x64>)
     778:	601a      	str	r2, [r3, #0]
	_extint_enable();
     77a:	4b08      	ldr	r3, [pc, #32]	; (79c <_system_extint_init+0x68>)
     77c:	4798      	blx	r3
}
     77e:	b003      	add	sp, #12
     780:	bd00      	pop	{pc}
     782:	46c0      	nop			; (mov r8, r8)
     784:	40000400 	.word	0x40000400
     788:	000015f1 	.word	0x000015f1
     78c:	00001565 	.word	0x00001565
     790:	40001800 	.word	0x40001800
     794:	2000006c 	.word	0x2000006c
     798:	e000e100 	.word	0xe000e100
     79c:	0000071d 	.word	0x0000071d

000007a0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     7a0:	b500      	push	{lr}
     7a2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7a4:	ab01      	add	r3, sp, #4
     7a6:	2280      	movs	r2, #128	; 0x80
     7a8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     7aa:	780a      	ldrb	r2, [r1, #0]
     7ac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     7ae:	784a      	ldrb	r2, [r1, #1]
     7b0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     7b2:	788a      	ldrb	r2, [r1, #2]
     7b4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     7b6:	0019      	movs	r1, r3
     7b8:	4b01      	ldr	r3, [pc, #4]	; (7c0 <port_pin_set_config+0x20>)
     7ba:	4798      	blx	r3
}
     7bc:	b003      	add	sp, #12
     7be:	bd00      	pop	{pc}
     7c0:	000016e9 	.word	0x000016e9

000007c4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7c6:	46de      	mov	lr, fp
     7c8:	4657      	mov	r7, sl
     7ca:	464e      	mov	r6, r9
     7cc:	4645      	mov	r5, r8
     7ce:	b5e0      	push	{r5, r6, r7, lr}
     7d0:	b087      	sub	sp, #28
     7d2:	4680      	mov	r8, r0
     7d4:	9104      	str	r1, [sp, #16]
     7d6:	0016      	movs	r6, r2
     7d8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     7da:	2200      	movs	r2, #0
     7dc:	2300      	movs	r3, #0
     7de:	2100      	movs	r1, #0
     7e0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     7e2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     7e4:	2001      	movs	r0, #1
     7e6:	0021      	movs	r1, r4
     7e8:	9600      	str	r6, [sp, #0]
     7ea:	9701      	str	r7, [sp, #4]
     7ec:	465c      	mov	r4, fp
     7ee:	9403      	str	r4, [sp, #12]
     7f0:	4644      	mov	r4, r8
     7f2:	9405      	str	r4, [sp, #20]
     7f4:	e013      	b.n	81e <long_division+0x5a>
     7f6:	2420      	movs	r4, #32
     7f8:	1a64      	subs	r4, r4, r1
     7fa:	0005      	movs	r5, r0
     7fc:	40e5      	lsrs	r5, r4
     7fe:	46a8      	mov	r8, r5
     800:	e014      	b.n	82c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     802:	9c00      	ldr	r4, [sp, #0]
     804:	9d01      	ldr	r5, [sp, #4]
     806:	1b12      	subs	r2, r2, r4
     808:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     80a:	465c      	mov	r4, fp
     80c:	464d      	mov	r5, r9
     80e:	432c      	orrs	r4, r5
     810:	46a3      	mov	fp, r4
     812:	9c03      	ldr	r4, [sp, #12]
     814:	4645      	mov	r5, r8
     816:	432c      	orrs	r4, r5
     818:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     81a:	3901      	subs	r1, #1
     81c:	d325      	bcc.n	86a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     81e:	2420      	movs	r4, #32
     820:	4264      	negs	r4, r4
     822:	190c      	adds	r4, r1, r4
     824:	d4e7      	bmi.n	7f6 <long_division+0x32>
     826:	0005      	movs	r5, r0
     828:	40a5      	lsls	r5, r4
     82a:	46a8      	mov	r8, r5
     82c:	0004      	movs	r4, r0
     82e:	408c      	lsls	r4, r1
     830:	46a1      	mov	r9, r4
		r = r << 1;
     832:	1892      	adds	r2, r2, r2
     834:	415b      	adcs	r3, r3
     836:	0014      	movs	r4, r2
     838:	001d      	movs	r5, r3
		if (n & bit_shift) {
     83a:	9e05      	ldr	r6, [sp, #20]
     83c:	464f      	mov	r7, r9
     83e:	403e      	ands	r6, r7
     840:	46b4      	mov	ip, r6
     842:	9e04      	ldr	r6, [sp, #16]
     844:	4647      	mov	r7, r8
     846:	403e      	ands	r6, r7
     848:	46b2      	mov	sl, r6
     84a:	4666      	mov	r6, ip
     84c:	4657      	mov	r7, sl
     84e:	433e      	orrs	r6, r7
     850:	d003      	beq.n	85a <long_division+0x96>
			r |= 0x01;
     852:	0006      	movs	r6, r0
     854:	4326      	orrs	r6, r4
     856:	0032      	movs	r2, r6
     858:	002b      	movs	r3, r5
		if (r >= d) {
     85a:	9c00      	ldr	r4, [sp, #0]
     85c:	9d01      	ldr	r5, [sp, #4]
     85e:	429d      	cmp	r5, r3
     860:	d8db      	bhi.n	81a <long_division+0x56>
     862:	d1ce      	bne.n	802 <long_division+0x3e>
     864:	4294      	cmp	r4, r2
     866:	d8d8      	bhi.n	81a <long_division+0x56>
     868:	e7cb      	b.n	802 <long_division+0x3e>
     86a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     86c:	4658      	mov	r0, fp
     86e:	0019      	movs	r1, r3
     870:	b007      	add	sp, #28
     872:	bc3c      	pop	{r2, r3, r4, r5}
     874:	4690      	mov	r8, r2
     876:	4699      	mov	r9, r3
     878:	46a2      	mov	sl, r4
     87a:	46ab      	mov	fp, r5
     87c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000087e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     87e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     880:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     882:	2340      	movs	r3, #64	; 0x40
     884:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     886:	4281      	cmp	r1, r0
     888:	d202      	bcs.n	890 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     88a:	0018      	movs	r0, r3
     88c:	bd10      	pop	{r4, pc}
		baud_calculated++;
     88e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     890:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     892:	1c63      	adds	r3, r4, #1
     894:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     896:	4288      	cmp	r0, r1
     898:	d9f9      	bls.n	88e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     89a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     89c:	2cff      	cmp	r4, #255	; 0xff
     89e:	d8f4      	bhi.n	88a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     8a0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     8a2:	2300      	movs	r3, #0
     8a4:	e7f1      	b.n	88a <_sercom_get_sync_baud_val+0xc>
	...

000008a8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8aa:	b083      	sub	sp, #12
     8ac:	000f      	movs	r7, r1
     8ae:	0016      	movs	r6, r2
     8b0:	aa08      	add	r2, sp, #32
     8b2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     8b4:	0004      	movs	r4, r0
     8b6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8b8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     8ba:	42bc      	cmp	r4, r7
     8bc:	d902      	bls.n	8c4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     8be:	0010      	movs	r0, r2
     8c0:	b003      	add	sp, #12
     8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     8c4:	2b00      	cmp	r3, #0
     8c6:	d114      	bne.n	8f2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     8c8:	0002      	movs	r2, r0
     8ca:	0008      	movs	r0, r1
     8cc:	2100      	movs	r1, #0
     8ce:	4c19      	ldr	r4, [pc, #100]	; (934 <_sercom_get_async_baud_val+0x8c>)
     8d0:	47a0      	blx	r4
     8d2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     8d4:	003a      	movs	r2, r7
     8d6:	2300      	movs	r3, #0
     8d8:	2000      	movs	r0, #0
     8da:	4c17      	ldr	r4, [pc, #92]	; (938 <_sercom_get_async_baud_val+0x90>)
     8dc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     8de:	2200      	movs	r2, #0
     8e0:	2301      	movs	r3, #1
     8e2:	1a12      	subs	r2, r2, r0
     8e4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     8e6:	0c12      	lsrs	r2, r2, #16
     8e8:	041b      	lsls	r3, r3, #16
     8ea:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     8ec:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     8ee:	2200      	movs	r2, #0
     8f0:	e7e5      	b.n	8be <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     8f2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     8f4:	2b01      	cmp	r3, #1
     8f6:	d1f9      	bne.n	8ec <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     8f8:	000a      	movs	r2, r1
     8fa:	2300      	movs	r3, #0
     8fc:	2100      	movs	r1, #0
     8fe:	4c0d      	ldr	r4, [pc, #52]	; (934 <_sercom_get_async_baud_val+0x8c>)
     900:	47a0      	blx	r4
     902:	0002      	movs	r2, r0
     904:	000b      	movs	r3, r1
     906:	9200      	str	r2, [sp, #0]
     908:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     90a:	0038      	movs	r0, r7
     90c:	2100      	movs	r1, #0
     90e:	4c0a      	ldr	r4, [pc, #40]	; (938 <_sercom_get_async_baud_val+0x90>)
     910:	47a0      	blx	r4
     912:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     914:	2380      	movs	r3, #128	; 0x80
     916:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     918:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     91a:	4298      	cmp	r0, r3
     91c:	d8cf      	bhi.n	8be <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     91e:	0f79      	lsrs	r1, r7, #29
     920:	00f8      	lsls	r0, r7, #3
     922:	9a00      	ldr	r2, [sp, #0]
     924:	9b01      	ldr	r3, [sp, #4]
     926:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     928:	00ea      	lsls	r2, r5, #3
     92a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     92c:	b2d2      	uxtb	r2, r2
     92e:	0352      	lsls	r2, r2, #13
     930:	432a      	orrs	r2, r5
     932:	e7db      	b.n	8ec <_sercom_get_async_baud_val+0x44>
     934:	00001d09 	.word	0x00001d09
     938:	000007c5 	.word	0x000007c5

0000093c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     93c:	b510      	push	{r4, lr}
     93e:	b082      	sub	sp, #8
     940:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     942:	4b0e      	ldr	r3, [pc, #56]	; (97c <sercom_set_gclk_generator+0x40>)
     944:	781b      	ldrb	r3, [r3, #0]
     946:	2b00      	cmp	r3, #0
     948:	d007      	beq.n	95a <sercom_set_gclk_generator+0x1e>
     94a:	2900      	cmp	r1, #0
     94c:	d105      	bne.n	95a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     94e:	4b0b      	ldr	r3, [pc, #44]	; (97c <sercom_set_gclk_generator+0x40>)
     950:	785b      	ldrb	r3, [r3, #1]
     952:	4283      	cmp	r3, r0
     954:	d010      	beq.n	978 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     956:	201d      	movs	r0, #29
     958:	e00c      	b.n	974 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     95a:	a901      	add	r1, sp, #4
     95c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     95e:	200d      	movs	r0, #13
     960:	4b07      	ldr	r3, [pc, #28]	; (980 <sercom_set_gclk_generator+0x44>)
     962:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     964:	200d      	movs	r0, #13
     966:	4b07      	ldr	r3, [pc, #28]	; (984 <sercom_set_gclk_generator+0x48>)
     968:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     96a:	4b04      	ldr	r3, [pc, #16]	; (97c <sercom_set_gclk_generator+0x40>)
     96c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     96e:	2201      	movs	r2, #1
     970:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     972:	2000      	movs	r0, #0
}
     974:	b002      	add	sp, #8
     976:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     978:	2000      	movs	r0, #0
     97a:	e7fb      	b.n	974 <sercom_set_gclk_generator+0x38>
     97c:	20000038 	.word	0x20000038
     980:	000015f1 	.word	0x000015f1
     984:	00001565 	.word	0x00001565

00000988 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     988:	4b20      	ldr	r3, [pc, #128]	; (a0c <_sercom_get_default_pad+0x84>)
     98a:	4298      	cmp	r0, r3
     98c:	d017      	beq.n	9be <_sercom_get_default_pad+0x36>
     98e:	4b20      	ldr	r3, [pc, #128]	; (a10 <_sercom_get_default_pad+0x88>)
     990:	4298      	cmp	r0, r3
     992:	d024      	beq.n	9de <_sercom_get_default_pad+0x56>
     994:	4b1f      	ldr	r3, [pc, #124]	; (a14 <_sercom_get_default_pad+0x8c>)
     996:	4298      	cmp	r0, r3
     998:	d001      	beq.n	99e <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     99a:	2000      	movs	r0, #0
}
     99c:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     99e:	2901      	cmp	r1, #1
     9a0:	d007      	beq.n	9b2 <_sercom_get_default_pad+0x2a>
     9a2:	2900      	cmp	r1, #0
     9a4:	d02b      	beq.n	9fe <_sercom_get_default_pad+0x76>
     9a6:	2902      	cmp	r1, #2
     9a8:	d005      	beq.n	9b6 <_sercom_get_default_pad+0x2e>
     9aa:	2903      	cmp	r1, #3
     9ac:	d005      	beq.n	9ba <_sercom_get_default_pad+0x32>
	return 0;
     9ae:	2000      	movs	r0, #0
     9b0:	e7f4      	b.n	99c <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9b2:	4819      	ldr	r0, [pc, #100]	; (a18 <_sercom_get_default_pad+0x90>)
     9b4:	e7f2      	b.n	99c <_sercom_get_default_pad+0x14>
     9b6:	4819      	ldr	r0, [pc, #100]	; (a1c <_sercom_get_default_pad+0x94>)
     9b8:	e7f0      	b.n	99c <_sercom_get_default_pad+0x14>
     9ba:	4819      	ldr	r0, [pc, #100]	; (a20 <_sercom_get_default_pad+0x98>)
     9bc:	e7ee      	b.n	99c <_sercom_get_default_pad+0x14>
     9be:	2901      	cmp	r1, #1
     9c0:	d007      	beq.n	9d2 <_sercom_get_default_pad+0x4a>
     9c2:	2900      	cmp	r1, #0
     9c4:	d01d      	beq.n	a02 <_sercom_get_default_pad+0x7a>
     9c6:	2902      	cmp	r1, #2
     9c8:	d005      	beq.n	9d6 <_sercom_get_default_pad+0x4e>
     9ca:	2903      	cmp	r1, #3
     9cc:	d005      	beq.n	9da <_sercom_get_default_pad+0x52>
	return 0;
     9ce:	2000      	movs	r0, #0
     9d0:	e7e4      	b.n	99c <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9d2:	4814      	ldr	r0, [pc, #80]	; (a24 <_sercom_get_default_pad+0x9c>)
     9d4:	e7e2      	b.n	99c <_sercom_get_default_pad+0x14>
     9d6:	4814      	ldr	r0, [pc, #80]	; (a28 <_sercom_get_default_pad+0xa0>)
     9d8:	e7e0      	b.n	99c <_sercom_get_default_pad+0x14>
     9da:	4814      	ldr	r0, [pc, #80]	; (a2c <_sercom_get_default_pad+0xa4>)
     9dc:	e7de      	b.n	99c <_sercom_get_default_pad+0x14>
     9de:	2901      	cmp	r1, #1
     9e0:	d007      	beq.n	9f2 <_sercom_get_default_pad+0x6a>
     9e2:	2900      	cmp	r1, #0
     9e4:	d00f      	beq.n	a06 <_sercom_get_default_pad+0x7e>
     9e6:	2902      	cmp	r1, #2
     9e8:	d005      	beq.n	9f6 <_sercom_get_default_pad+0x6e>
     9ea:	2903      	cmp	r1, #3
     9ec:	d005      	beq.n	9fa <_sercom_get_default_pad+0x72>
	return 0;
     9ee:	2000      	movs	r0, #0
     9f0:	e7d4      	b.n	99c <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9f2:	480f      	ldr	r0, [pc, #60]	; (a30 <_sercom_get_default_pad+0xa8>)
     9f4:	e7d2      	b.n	99c <_sercom_get_default_pad+0x14>
     9f6:	480f      	ldr	r0, [pc, #60]	; (a34 <_sercom_get_default_pad+0xac>)
     9f8:	e7d0      	b.n	99c <_sercom_get_default_pad+0x14>
     9fa:	480f      	ldr	r0, [pc, #60]	; (a38 <_sercom_get_default_pad+0xb0>)
     9fc:	e7ce      	b.n	99c <_sercom_get_default_pad+0x14>
     9fe:	480f      	ldr	r0, [pc, #60]	; (a3c <_sercom_get_default_pad+0xb4>)
     a00:	e7cc      	b.n	99c <_sercom_get_default_pad+0x14>
     a02:	480f      	ldr	r0, [pc, #60]	; (a40 <_sercom_get_default_pad+0xb8>)
     a04:	e7ca      	b.n	99c <_sercom_get_default_pad+0x14>
     a06:	480f      	ldr	r0, [pc, #60]	; (a44 <_sercom_get_default_pad+0xbc>)
     a08:	e7c8      	b.n	99c <_sercom_get_default_pad+0x14>
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	42000c00 	.word	0x42000c00
     a10:	42001000 	.word	0x42001000
     a14:	42000800 	.word	0x42000800
     a18:	00050003 	.word	0x00050003
     a1c:	00060003 	.word	0x00060003
     a20:	00070003 	.word	0x00070003
     a24:	00170002 	.word	0x00170002
     a28:	001e0003 	.word	0x001e0003
     a2c:	001f0003 	.word	0x001f0003
     a30:	00170003 	.word	0x00170003
     a34:	00100003 	.word	0x00100003
     a38:	00190003 	.word	0x00190003
     a3c:	00040003 	.word	0x00040003
     a40:	00160002 	.word	0x00160002
     a44:	00160003 	.word	0x00160003

00000a48 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a48:	b530      	push	{r4, r5, lr}
     a4a:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a4c:	aa01      	add	r2, sp, #4
     a4e:	4b0b      	ldr	r3, [pc, #44]	; (a7c <_sercom_get_sercom_inst_index+0x34>)
     a50:	cb32      	ldmia	r3!, {r1, r4, r5}
     a52:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a54:	0003      	movs	r3, r0
     a56:	9a01      	ldr	r2, [sp, #4]
     a58:	4282      	cmp	r2, r0
     a5a:	d00c      	beq.n	a76 <_sercom_get_sercom_inst_index+0x2e>
     a5c:	9a02      	ldr	r2, [sp, #8]
     a5e:	4282      	cmp	r2, r0
     a60:	d007      	beq.n	a72 <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a62:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a64:	9a03      	ldr	r2, [sp, #12]
     a66:	429a      	cmp	r2, r3
     a68:	d001      	beq.n	a6e <_sercom_get_sercom_inst_index+0x26>
}
     a6a:	b005      	add	sp, #20
     a6c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a6e:	3002      	adds	r0, #2
     a70:	e002      	b.n	a78 <_sercom_get_sercom_inst_index+0x30>
     a72:	2001      	movs	r0, #1
     a74:	e000      	b.n	a78 <_sercom_get_sercom_inst_index+0x30>
     a76:	2000      	movs	r0, #0
			return i;
     a78:	b2c0      	uxtb	r0, r0
     a7a:	e7f6      	b.n	a6a <_sercom_get_sercom_inst_index+0x22>
     a7c:	00001edc 	.word	0x00001edc

00000a80 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     a80:	4770      	bx	lr
	...

00000a84 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     a84:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     a86:	4b0a      	ldr	r3, [pc, #40]	; (ab0 <_sercom_set_handler+0x2c>)
     a88:	781b      	ldrb	r3, [r3, #0]
     a8a:	2b00      	cmp	r3, #0
     a8c:	d10c      	bne.n	aa8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a8e:	4c09      	ldr	r4, [pc, #36]	; (ab4 <_sercom_set_handler+0x30>)
     a90:	4d09      	ldr	r5, [pc, #36]	; (ab8 <_sercom_set_handler+0x34>)
     a92:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     a94:	4b09      	ldr	r3, [pc, #36]	; (abc <_sercom_set_handler+0x38>)
     a96:	2200      	movs	r2, #0
     a98:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a9a:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     a9c:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a9e:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
     aa0:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
     aa2:	3201      	adds	r2, #1
     aa4:	4b02      	ldr	r3, [pc, #8]	; (ab0 <_sercom_set_handler+0x2c>)
     aa6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     aa8:	0080      	lsls	r0, r0, #2
     aaa:	4b02      	ldr	r3, [pc, #8]	; (ab4 <_sercom_set_handler+0x30>)
     aac:	50c1      	str	r1, [r0, r3]
}
     aae:	bd30      	pop	{r4, r5, pc}
     ab0:	2000003a 	.word	0x2000003a
     ab4:	2000003c 	.word	0x2000003c
     ab8:	00000a81 	.word	0x00000a81
     abc:	200000ac 	.word	0x200000ac

00000ac0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     ac0:	b510      	push	{r4, lr}
     ac2:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ac4:	ac01      	add	r4, sp, #4
     ac6:	2309      	movs	r3, #9
     ac8:	7023      	strb	r3, [r4, #0]
     aca:	3301      	adds	r3, #1
     acc:	7063      	strb	r3, [r4, #1]
     ace:	3301      	adds	r3, #1
     ad0:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     ad2:	4b02      	ldr	r3, [pc, #8]	; (adc <_sercom_get_interrupt_vector+0x1c>)
     ad4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ad6:	5620      	ldrsb	r0, [r4, r0]
}
     ad8:	b002      	add	sp, #8
     ada:	bd10      	pop	{r4, pc}
     adc:	00000a49 	.word	0x00000a49

00000ae0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ae0:	b510      	push	{r4, lr}
     ae2:	4b02      	ldr	r3, [pc, #8]	; (aec <SERCOM0_Handler+0xc>)
     ae4:	681b      	ldr	r3, [r3, #0]
     ae6:	2000      	movs	r0, #0
     ae8:	4798      	blx	r3
     aea:	bd10      	pop	{r4, pc}
     aec:	2000003c 	.word	0x2000003c

00000af0 <SERCOM1_Handler>:
     af0:	b510      	push	{r4, lr}
     af2:	4b02      	ldr	r3, [pc, #8]	; (afc <SERCOM1_Handler+0xc>)
     af4:	685b      	ldr	r3, [r3, #4]
     af6:	2001      	movs	r0, #1
     af8:	4798      	blx	r3
     afa:	bd10      	pop	{r4, pc}
     afc:	2000003c 	.word	0x2000003c

00000b00 <SERCOM2_Handler>:
     b00:	b510      	push	{r4, lr}
     b02:	4b02      	ldr	r3, [pc, #8]	; (b0c <SERCOM2_Handler+0xc>)
     b04:	689b      	ldr	r3, [r3, #8]
     b06:	2002      	movs	r0, #2
     b08:	4798      	blx	r3
     b0a:	bd10      	pop	{r4, pc}
     b0c:	2000003c 	.word	0x2000003c

00000b10 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     b10:	b5f0      	push	{r4, r5, r6, r7, lr}
     b12:	46de      	mov	lr, fp
     b14:	4657      	mov	r7, sl
     b16:	464e      	mov	r6, r9
     b18:	4645      	mov	r5, r8
     b1a:	b5e0      	push	{r5, r6, r7, lr}
     b1c:	b091      	sub	sp, #68	; 0x44
     b1e:	0005      	movs	r5, r0
     b20:	000c      	movs	r4, r1
     b22:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     b24:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b26:	0008      	movs	r0, r1
     b28:	4bba      	ldr	r3, [pc, #744]	; (e14 <usart_init+0x304>)
     b2a:	4798      	blx	r3
     b2c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b2e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     b30:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b32:	07db      	lsls	r3, r3, #31
     b34:	d506      	bpl.n	b44 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     b36:	b011      	add	sp, #68	; 0x44
     b38:	bc3c      	pop	{r2, r3, r4, r5}
     b3a:	4690      	mov	r8, r2
     b3c:	4699      	mov	r9, r3
     b3e:	46a2      	mov	sl, r4
     b40:	46ab      	mov	fp, r5
     b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b44:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     b46:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b48:	079b      	lsls	r3, r3, #30
     b4a:	d4f4      	bmi.n	b36 <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
     b4c:	49b2      	ldr	r1, [pc, #712]	; (e18 <usart_init+0x308>)
     b4e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b50:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b52:	2301      	movs	r3, #1
     b54:	40bb      	lsls	r3, r7
     b56:	4303      	orrs	r3, r0
     b58:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     b5a:	a90f      	add	r1, sp, #60	; 0x3c
     b5c:	272d      	movs	r7, #45	; 0x2d
     b5e:	5df3      	ldrb	r3, [r6, r7]
     b60:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b62:	320e      	adds	r2, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b64:	b2d3      	uxtb	r3, r2
     b66:	9302      	str	r3, [sp, #8]
     b68:	0018      	movs	r0, r3
     b6a:	4bac      	ldr	r3, [pc, #688]	; (e1c <usart_init+0x30c>)
     b6c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b6e:	9802      	ldr	r0, [sp, #8]
     b70:	4bab      	ldr	r3, [pc, #684]	; (e20 <usart_init+0x310>)
     b72:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b74:	5df0      	ldrb	r0, [r6, r7]
     b76:	2100      	movs	r1, #0
     b78:	4baa      	ldr	r3, [pc, #680]	; (e24 <usart_init+0x314>)
     b7a:	4798      	blx	r3
	module->character_size = config->character_size;
     b7c:	7af3      	ldrb	r3, [r6, #11]
     b7e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     b80:	2324      	movs	r3, #36	; 0x24
     b82:	5cf3      	ldrb	r3, [r6, r3]
     b84:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     b86:	2325      	movs	r3, #37	; 0x25
     b88:	5cf3      	ldrb	r3, [r6, r3]
     b8a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     b8c:	7ef3      	ldrb	r3, [r6, #27]
     b8e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b90:	7f33      	ldrb	r3, [r6, #28]
     b92:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b94:	682b      	ldr	r3, [r5, #0]
     b96:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b98:	0018      	movs	r0, r3
     b9a:	4b9e      	ldr	r3, [pc, #632]	; (e14 <usart_init+0x304>)
     b9c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b9e:	300e      	adds	r0, #14
	uint16_t baud  = 0;
     ba0:	2200      	movs	r2, #0
     ba2:	230e      	movs	r3, #14
     ba4:	a906      	add	r1, sp, #24
     ba6:	468c      	mov	ip, r1
     ba8:	4463      	add	r3, ip
     baa:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     bac:	8a32      	ldrh	r2, [r6, #16]
     bae:	9202      	str	r2, [sp, #8]
     bb0:	2380      	movs	r3, #128	; 0x80
     bb2:	01db      	lsls	r3, r3, #7
     bb4:	429a      	cmp	r2, r3
     bb6:	d100      	bne.n	bba <usart_init+0xaa>
     bb8:	e09a      	b.n	cf0 <usart_init+0x1e0>
     bba:	d90f      	bls.n	bdc <usart_init+0xcc>
     bbc:	23c0      	movs	r3, #192	; 0xc0
     bbe:	01db      	lsls	r3, r3, #7
     bc0:	9a02      	ldr	r2, [sp, #8]
     bc2:	429a      	cmp	r2, r3
     bc4:	d100      	bne.n	bc8 <usart_init+0xb8>
     bc6:	e08e      	b.n	ce6 <usart_init+0x1d6>
     bc8:	2380      	movs	r3, #128	; 0x80
     bca:	021b      	lsls	r3, r3, #8
     bcc:	429a      	cmp	r2, r3
     bce:	d000      	beq.n	bd2 <usart_init+0xc2>
     bd0:	e11b      	b.n	e0a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     bd2:	2303      	movs	r3, #3
     bd4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     bd6:	2300      	movs	r3, #0
     bd8:	9307      	str	r3, [sp, #28]
     bda:	e008      	b.n	bee <usart_init+0xde>
	switch (config->sample_rate) {
     bdc:	2380      	movs	r3, #128	; 0x80
     bde:	019b      	lsls	r3, r3, #6
     be0:	429a      	cmp	r2, r3
     be2:	d000      	beq.n	be6 <usart_init+0xd6>
     be4:	e111      	b.n	e0a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     be6:	2310      	movs	r3, #16
     be8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     bea:	3b0f      	subs	r3, #15
     bec:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     bee:	6833      	ldr	r3, [r6, #0]
     bf0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     bf2:	68f3      	ldr	r3, [r6, #12]
     bf4:	469b      	mov	fp, r3
		config->sample_adjustment |
     bf6:	6973      	ldr	r3, [r6, #20]
     bf8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bfa:	7e33      	ldrb	r3, [r6, #24]
     bfc:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bfe:	2326      	movs	r3, #38	; 0x26
     c00:	5cf3      	ldrb	r3, [r6, r3]
     c02:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     c04:	6873      	ldr	r3, [r6, #4]
     c06:	4699      	mov	r9, r3
	switch (transfer_mode)
     c08:	2b00      	cmp	r3, #0
     c0a:	d100      	bne.n	c0e <usart_init+0xfe>
     c0c:	e09c      	b.n	d48 <usart_init+0x238>
     c0e:	2380      	movs	r3, #128	; 0x80
     c10:	055b      	lsls	r3, r3, #21
     c12:	4599      	cmp	r9, r3
     c14:	d100      	bne.n	c18 <usart_init+0x108>
     c16:	e080      	b.n	d1a <usart_init+0x20a>
	if(config->encoding_format_enable) {
     c18:	7e73      	ldrb	r3, [r6, #25]
     c1a:	2b00      	cmp	r3, #0
     c1c:	d002      	beq.n	c24 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     c1e:	7eb3      	ldrb	r3, [r6, #26]
     c20:	4642      	mov	r2, r8
     c22:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     c24:	230e      	movs	r3, #14
     c26:	aa06      	add	r2, sp, #24
     c28:	4694      	mov	ip, r2
     c2a:	4463      	add	r3, ip
     c2c:	881b      	ldrh	r3, [r3, #0]
     c2e:	4642      	mov	r2, r8
     c30:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     c32:	9b05      	ldr	r3, [sp, #20]
     c34:	465a      	mov	r2, fp
     c36:	4313      	orrs	r3, r2
     c38:	9a03      	ldr	r2, [sp, #12]
     c3a:	4313      	orrs	r3, r2
     c3c:	464a      	mov	r2, r9
     c3e:	4313      	orrs	r3, r2
     c40:	9f02      	ldr	r7, [sp, #8]
     c42:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c44:	9b04      	ldr	r3, [sp, #16]
     c46:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     c48:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c4a:	4653      	mov	r3, sl
     c4c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     c4e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     c50:	2327      	movs	r3, #39	; 0x27
     c52:	5cf3      	ldrb	r3, [r6, r3]
     c54:	2b00      	cmp	r3, #0
     c56:	d101      	bne.n	c5c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     c58:	3304      	adds	r3, #4
     c5a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c5c:	7e73      	ldrb	r3, [r6, #25]
     c5e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c60:	7f32      	ldrb	r2, [r6, #28]
     c62:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c64:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c66:	7f72      	ldrb	r2, [r6, #29]
     c68:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c6a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c6c:	2224      	movs	r2, #36	; 0x24
     c6e:	5cb2      	ldrb	r2, [r6, r2]
     c70:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c72:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c74:	2225      	movs	r2, #37	; 0x25
     c76:	5cb2      	ldrb	r2, [r6, r2]
     c78:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c7a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     c7c:	7ab1      	ldrb	r1, [r6, #10]
     c7e:	7af2      	ldrb	r2, [r6, #11]
     c80:	4311      	orrs	r1, r2
     c82:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     c84:	8933      	ldrh	r3, [r6, #8]
     c86:	2bff      	cmp	r3, #255	; 0xff
     c88:	d100      	bne.n	c8c <usart_init+0x17c>
     c8a:	e081      	b.n	d90 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c8c:	2280      	movs	r2, #128	; 0x80
     c8e:	0452      	lsls	r2, r2, #17
     c90:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     c92:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     c94:	232c      	movs	r3, #44	; 0x2c
     c96:	5cf3      	ldrb	r3, [r6, r3]
     c98:	2b00      	cmp	r3, #0
     c9a:	d103      	bne.n	ca4 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c9c:	4b62      	ldr	r3, [pc, #392]	; (e28 <usart_init+0x318>)
     c9e:	789b      	ldrb	r3, [r3, #2]
     ca0:	079b      	lsls	r3, r3, #30
     ca2:	d501      	bpl.n	ca8 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     ca4:	2380      	movs	r3, #128	; 0x80
     ca6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ca8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     caa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     cac:	2b00      	cmp	r3, #0
     cae:	d1fc      	bne.n	caa <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     cb0:	4643      	mov	r3, r8
     cb2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     cb4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     cb6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     cb8:	2b00      	cmp	r3, #0
     cba:	d1fc      	bne.n	cb6 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     cbc:	4643      	mov	r3, r8
     cbe:	601f      	str	r7, [r3, #0]
     cc0:	ab0e      	add	r3, sp, #56	; 0x38
     cc2:	2280      	movs	r2, #128	; 0x80
     cc4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cc6:	2200      	movs	r2, #0
     cc8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     cca:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ccc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     cce:	6b33      	ldr	r3, [r6, #48]	; 0x30
     cd0:	930a      	str	r3, [sp, #40]	; 0x28
     cd2:	6b73      	ldr	r3, [r6, #52]	; 0x34
     cd4:	930b      	str	r3, [sp, #44]	; 0x2c
     cd6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     cd8:	930c      	str	r3, [sp, #48]	; 0x30
     cda:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     cdc:	9302      	str	r3, [sp, #8]
     cde:	930d      	str	r3, [sp, #52]	; 0x34
     ce0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ce2:	ae0a      	add	r6, sp, #40	; 0x28
     ce4:	e063      	b.n	dae <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ce6:	2308      	movs	r3, #8
     ce8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     cea:	3b07      	subs	r3, #7
     cec:	9307      	str	r3, [sp, #28]
     cee:	e77e      	b.n	bee <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     cf0:	6833      	ldr	r3, [r6, #0]
     cf2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     cf4:	68f3      	ldr	r3, [r6, #12]
     cf6:	469b      	mov	fp, r3
		config->sample_adjustment |
     cf8:	6973      	ldr	r3, [r6, #20]
     cfa:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     cfc:	7e33      	ldrb	r3, [r6, #24]
     cfe:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d00:	2326      	movs	r3, #38	; 0x26
     d02:	5cf3      	ldrb	r3, [r6, r3]
     d04:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     d06:	6873      	ldr	r3, [r6, #4]
     d08:	4699      	mov	r9, r3
	switch (transfer_mode)
     d0a:	2b00      	cmp	r3, #0
     d0c:	d018      	beq.n	d40 <usart_init+0x230>
     d0e:	2380      	movs	r3, #128	; 0x80
     d10:	055b      	lsls	r3, r3, #21
     d12:	4599      	cmp	r9, r3
     d14:	d001      	beq.n	d1a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     d16:	2000      	movs	r0, #0
     d18:	e025      	b.n	d66 <usart_init+0x256>
			if (!config->use_external_clock) {
     d1a:	2327      	movs	r3, #39	; 0x27
     d1c:	5cf3      	ldrb	r3, [r6, r3]
     d1e:	2b00      	cmp	r3, #0
     d20:	d000      	beq.n	d24 <usart_init+0x214>
     d22:	e779      	b.n	c18 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     d24:	6a33      	ldr	r3, [r6, #32]
     d26:	001f      	movs	r7, r3
     d28:	b2c0      	uxtb	r0, r0
     d2a:	4b40      	ldr	r3, [pc, #256]	; (e2c <usart_init+0x31c>)
     d2c:	4798      	blx	r3
     d2e:	0001      	movs	r1, r0
     d30:	220e      	movs	r2, #14
     d32:	ab06      	add	r3, sp, #24
     d34:	469c      	mov	ip, r3
     d36:	4462      	add	r2, ip
     d38:	0038      	movs	r0, r7
     d3a:	4b3d      	ldr	r3, [pc, #244]	; (e30 <usart_init+0x320>)
     d3c:	4798      	blx	r3
     d3e:	e012      	b.n	d66 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d40:	2308      	movs	r3, #8
     d42:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d44:	2300      	movs	r3, #0
     d46:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     d48:	2327      	movs	r3, #39	; 0x27
     d4a:	5cf3      	ldrb	r3, [r6, r3]
     d4c:	2b00      	cmp	r3, #0
     d4e:	d00e      	beq.n	d6e <usart_init+0x25e>
				status_code =
     d50:	9b06      	ldr	r3, [sp, #24]
     d52:	9300      	str	r3, [sp, #0]
     d54:	9b07      	ldr	r3, [sp, #28]
     d56:	220e      	movs	r2, #14
     d58:	a906      	add	r1, sp, #24
     d5a:	468c      	mov	ip, r1
     d5c:	4462      	add	r2, ip
     d5e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     d60:	6a30      	ldr	r0, [r6, #32]
     d62:	4f34      	ldr	r7, [pc, #208]	; (e34 <usart_init+0x324>)
     d64:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     d66:	2800      	cmp	r0, #0
     d68:	d000      	beq.n	d6c <usart_init+0x25c>
     d6a:	e6e4      	b.n	b36 <usart_init+0x26>
     d6c:	e754      	b.n	c18 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     d6e:	6a33      	ldr	r3, [r6, #32]
     d70:	001f      	movs	r7, r3
     d72:	b2c0      	uxtb	r0, r0
     d74:	4b2d      	ldr	r3, [pc, #180]	; (e2c <usart_init+0x31c>)
     d76:	4798      	blx	r3
     d78:	0001      	movs	r1, r0
				status_code =
     d7a:	9b06      	ldr	r3, [sp, #24]
     d7c:	9300      	str	r3, [sp, #0]
     d7e:	9b07      	ldr	r3, [sp, #28]
     d80:	220e      	movs	r2, #14
     d82:	a806      	add	r0, sp, #24
     d84:	4684      	mov	ip, r0
     d86:	4462      	add	r2, ip
     d88:	0038      	movs	r0, r7
     d8a:	4f2a      	ldr	r7, [pc, #168]	; (e34 <usart_init+0x324>)
     d8c:	47b8      	blx	r7
     d8e:	e7ea      	b.n	d66 <usart_init+0x256>
		if(config->lin_slave_enable) {
     d90:	7ef3      	ldrb	r3, [r6, #27]
     d92:	2b00      	cmp	r3, #0
     d94:	d100      	bne.n	d98 <usart_init+0x288>
     d96:	e77d      	b.n	c94 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     d98:	2380      	movs	r3, #128	; 0x80
     d9a:	04db      	lsls	r3, r3, #19
     d9c:	431f      	orrs	r7, r3
     d9e:	e779      	b.n	c94 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     da0:	0020      	movs	r0, r4
     da2:	4b25      	ldr	r3, [pc, #148]	; (e38 <usart_init+0x328>)
     da4:	4798      	blx	r3
     da6:	e007      	b.n	db8 <usart_init+0x2a8>
     da8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     daa:	2f04      	cmp	r7, #4
     dac:	d00d      	beq.n	dca <usart_init+0x2ba>
     dae:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     db0:	00bb      	lsls	r3, r7, #2
     db2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     db4:	2800      	cmp	r0, #0
     db6:	d0f3      	beq.n	da0 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     db8:	1c43      	adds	r3, r0, #1
     dba:	d0f5      	beq.n	da8 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     dbc:	a90e      	add	r1, sp, #56	; 0x38
     dbe:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     dc0:	0c00      	lsrs	r0, r0, #16
     dc2:	b2c0      	uxtb	r0, r0
     dc4:	4b1d      	ldr	r3, [pc, #116]	; (e3c <usart_init+0x32c>)
     dc6:	4798      	blx	r3
     dc8:	e7ee      	b.n	da8 <usart_init+0x298>
		module->callback[i]            = NULL;
     dca:	2300      	movs	r3, #0
     dcc:	60eb      	str	r3, [r5, #12]
     dce:	612b      	str	r3, [r5, #16]
     dd0:	616b      	str	r3, [r5, #20]
     dd2:	61ab      	str	r3, [r5, #24]
     dd4:	61eb      	str	r3, [r5, #28]
     dd6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     dd8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     dda:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     ddc:	2200      	movs	r2, #0
     dde:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     de0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     de2:	3330      	adds	r3, #48	; 0x30
     de4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     de6:	3301      	adds	r3, #1
     de8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     dea:	3301      	adds	r3, #1
     dec:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     dee:	3301      	adds	r3, #1
     df0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     df2:	6828      	ldr	r0, [r5, #0]
     df4:	4b07      	ldr	r3, [pc, #28]	; (e14 <usart_init+0x304>)
     df6:	4798      	blx	r3
     df8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     dfa:	4911      	ldr	r1, [pc, #68]	; (e40 <usart_init+0x330>)
     dfc:	4b11      	ldr	r3, [pc, #68]	; (e44 <usart_init+0x334>)
     dfe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     e00:	00a4      	lsls	r4, r4, #2
     e02:	4b11      	ldr	r3, [pc, #68]	; (e48 <usart_init+0x338>)
     e04:	50e5      	str	r5, [r4, r3]
	return status_code;
     e06:	2000      	movs	r0, #0
     e08:	e695      	b.n	b36 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e0a:	2310      	movs	r3, #16
     e0c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e0e:	2300      	movs	r3, #0
     e10:	9307      	str	r3, [sp, #28]
     e12:	e6ec      	b.n	bee <usart_init+0xde>
     e14:	00000a49 	.word	0x00000a49
     e18:	40000400 	.word	0x40000400
     e1c:	000015f1 	.word	0x000015f1
     e20:	00001565 	.word	0x00001565
     e24:	0000093d 	.word	0x0000093d
     e28:	41002000 	.word	0x41002000
     e2c:	0000160d 	.word	0x0000160d
     e30:	0000087f 	.word	0x0000087f
     e34:	000008a9 	.word	0x000008a9
     e38:	00000989 	.word	0x00000989
     e3c:	000016e9 	.word	0x000016e9
     e40:	00001015 	.word	0x00001015
     e44:	00000a85 	.word	0x00000a85
     e48:	200000ac 	.word	0x200000ac

00000e4c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     e4c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     e4e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     e50:	2a00      	cmp	r2, #0
     e52:	d101      	bne.n	e58 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     e54:	0018      	movs	r0, r3
     e56:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     e58:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     e5a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e5c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     e5e:	2a00      	cmp	r2, #0
     e60:	d1f8      	bne.n	e54 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e62:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     e64:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     e66:	2102      	movs	r1, #2
     e68:	7e13      	ldrb	r3, [r2, #24]
     e6a:	420b      	tst	r3, r1
     e6c:	d0fc      	beq.n	e68 <usart_write_wait+0x1c>
	return STATUS_OK;
     e6e:	2300      	movs	r3, #0
     e70:	e7f0      	b.n	e54 <usart_write_wait+0x8>
	...

00000e74 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e74:	b5f0      	push	{r4, r5, r6, r7, lr}
     e76:	46ce      	mov	lr, r9
     e78:	4647      	mov	r7, r8
     e7a:	b580      	push	{r7, lr}
     e7c:	b083      	sub	sp, #12
     e7e:	0005      	movs	r5, r0
     e80:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     e82:	2017      	movs	r0, #23
	if (length == 0) {
     e84:	2a00      	cmp	r2, #0
     e86:	d104      	bne.n	e92 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     e88:	b003      	add	sp, #12
     e8a:	bc0c      	pop	{r2, r3}
     e8c:	4690      	mov	r8, r2
     e8e:	4699      	mov	r9, r3
     e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     e92:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     e94:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     e96:	2b00      	cmp	r3, #0
     e98:	d0f6      	beq.n	e88 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e9a:	682c      	ldr	r4, [r5, #0]
	while (length--) {
     e9c:	3a01      	subs	r2, #1
     e9e:	b293      	uxth	r3, r2
     ea0:	4699      	mov	r9, r3
     ea2:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     ea4:	2701      	movs	r7, #1
	while (length--) {
     ea6:	4b20      	ldr	r3, [pc, #128]	; (f28 <usart_write_buffer_wait+0xb4>)
     ea8:	4698      	mov	r8, r3
     eaa:	e011      	b.n	ed0 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
     eac:	1c73      	adds	r3, r6, #1
     eae:	b29b      	uxth	r3, r3
     eb0:	9a01      	ldr	r2, [sp, #4]
     eb2:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     eb4:	796a      	ldrb	r2, [r5, #5]
     eb6:	2a01      	cmp	r2, #1
     eb8:	d017      	beq.n	eea <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
     eba:	b289      	uxth	r1, r1
     ebc:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     ebe:	0028      	movs	r0, r5
     ec0:	4b1a      	ldr	r3, [pc, #104]	; (f2c <usart_write_buffer_wait+0xb8>)
     ec2:	4798      	blx	r3
	while (length--) {
     ec4:	464b      	mov	r3, r9
     ec6:	3b01      	subs	r3, #1
     ec8:	b29b      	uxth	r3, r3
     eca:	4699      	mov	r9, r3
     ecc:	4543      	cmp	r3, r8
     ece:	d013      	beq.n	ef8 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     ed0:	7e23      	ldrb	r3, [r4, #24]
     ed2:	423b      	tst	r3, r7
     ed4:	d1ea      	bne.n	eac <usart_write_buffer_wait+0x38>
     ed6:	4b14      	ldr	r3, [pc, #80]	; (f28 <usart_write_buffer_wait+0xb4>)
     ed8:	7e22      	ldrb	r2, [r4, #24]
     eda:	423a      	tst	r2, r7
     edc:	d1e6      	bne.n	eac <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
     ede:	2b01      	cmp	r3, #1
     ee0:	d019      	beq.n	f16 <usart_write_buffer_wait+0xa2>
     ee2:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     ee4:	2b00      	cmp	r3, #0
     ee6:	d1f7      	bne.n	ed8 <usart_write_buffer_wait+0x64>
     ee8:	e7e0      	b.n	eac <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
     eea:	3602      	adds	r6, #2
     eec:	b2b6      	uxth	r6, r6
     eee:	9a01      	ldr	r2, [sp, #4]
     ef0:	5cd3      	ldrb	r3, [r2, r3]
     ef2:	021b      	lsls	r3, r3, #8
     ef4:	4319      	orrs	r1, r3
     ef6:	e7e2      	b.n	ebe <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     ef8:	7e23      	ldrb	r3, [r4, #24]
     efa:	079b      	lsls	r3, r3, #30
     efc:	d40d      	bmi.n	f1a <usart_write_buffer_wait+0xa6>
     efe:	4b0a      	ldr	r3, [pc, #40]	; (f28 <usart_write_buffer_wait+0xb4>)
     f00:	2102      	movs	r1, #2
     f02:	7e22      	ldrb	r2, [r4, #24]
     f04:	420a      	tst	r2, r1
     f06:	d10a      	bne.n	f1e <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
     f08:	2b01      	cmp	r3, #1
     f0a:	d00a      	beq.n	f22 <usart_write_buffer_wait+0xae>
     f0c:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     f0e:	2b00      	cmp	r3, #0
     f10:	d1f7      	bne.n	f02 <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
     f12:	2000      	movs	r0, #0
     f14:	e7b8      	b.n	e88 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     f16:	2012      	movs	r0, #18
     f18:	e7b6      	b.n	e88 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     f1a:	2000      	movs	r0, #0
     f1c:	e7b4      	b.n	e88 <usart_write_buffer_wait+0x14>
     f1e:	2000      	movs	r0, #0
     f20:	e7b2      	b.n	e88 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     f22:	2012      	movs	r0, #18
     f24:	e7b0      	b.n	e88 <usart_write_buffer_wait+0x14>
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	0000ffff 	.word	0x0000ffff
     f2c:	00000e4d 	.word	0x00000e4d

00000f30 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f32:	0006      	movs	r6, r0
     f34:	000c      	movs	r4, r1
     f36:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f38:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     f3a:	4b0a      	ldr	r3, [pc, #40]	; (f64 <_usart_write_buffer+0x34>)
     f3c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     f3e:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     f40:	b29b      	uxth	r3, r3
     f42:	2b00      	cmp	r3, #0
     f44:	d003      	beq.n	f4e <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
     f46:	4b08      	ldr	r3, [pc, #32]	; (f68 <_usart_write_buffer+0x38>)
     f48:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     f4a:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     f4e:	85f5      	strh	r5, [r6, #46]	; 0x2e
     f50:	4b05      	ldr	r3, [pc, #20]	; (f68 <_usart_write_buffer+0x38>)
     f52:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     f54:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     f56:	2205      	movs	r2, #5
     f58:	2333      	movs	r3, #51	; 0x33
     f5a:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     f5c:	3b32      	subs	r3, #50	; 0x32
     f5e:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     f60:	2000      	movs	r0, #0
     f62:	e7f3      	b.n	f4c <_usart_write_buffer+0x1c>
     f64:	000000ed 	.word	0x000000ed
     f68:	0000012d 	.word	0x0000012d

00000f6c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f6e:	0004      	movs	r4, r0
     f70:	000d      	movs	r5, r1
     f72:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f74:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     f76:	4b0f      	ldr	r3, [pc, #60]	; (fb4 <_usart_read_buffer+0x48>)
     f78:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     f7a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     f7c:	b29b      	uxth	r3, r3
     f7e:	2b00      	cmp	r3, #0
     f80:	d003      	beq.n	f8a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     f82:	4b0d      	ldr	r3, [pc, #52]	; (fb8 <_usart_read_buffer+0x4c>)
     f84:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     f86:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     f8a:	85a6      	strh	r6, [r4, #44]	; 0x2c
     f8c:	4b0a      	ldr	r3, [pc, #40]	; (fb8 <_usart_read_buffer+0x4c>)
     f8e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     f90:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     f92:	2205      	movs	r2, #5
     f94:	2332      	movs	r3, #50	; 0x32
     f96:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     f98:	3b2e      	subs	r3, #46	; 0x2e
     f9a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     f9c:	7a23      	ldrb	r3, [r4, #8]
     f9e:	2b00      	cmp	r3, #0
     fa0:	d001      	beq.n	fa6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     fa2:	2320      	movs	r3, #32
     fa4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     fa6:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     fa8:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     faa:	2b00      	cmp	r3, #0
     fac:	d0ec      	beq.n	f88 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     fae:	2308      	movs	r3, #8
     fb0:	75bb      	strb	r3, [r7, #22]
     fb2:	e7e9      	b.n	f88 <_usart_read_buffer+0x1c>
     fb4:	000000ed 	.word	0x000000ed
     fb8:	0000012d 	.word	0x0000012d

00000fbc <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     fbc:	1c93      	adds	r3, r2, #2
     fbe:	009b      	lsls	r3, r3, #2
     fc0:	18c3      	adds	r3, r0, r3
     fc2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     fc4:	2130      	movs	r1, #48	; 0x30
     fc6:	2301      	movs	r3, #1
     fc8:	4093      	lsls	r3, r2
     fca:	001a      	movs	r2, r3
     fcc:	5c43      	ldrb	r3, [r0, r1]
     fce:	4313      	orrs	r3, r2
     fd0:	5443      	strb	r3, [r0, r1]
}
     fd2:	4770      	bx	lr

00000fd4 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     fd4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     fd6:	2317      	movs	r3, #23
	if (length == 0) {
     fd8:	2a00      	cmp	r2, #0
     fda:	d101      	bne.n	fe0 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     fdc:	0018      	movs	r0, r3
     fde:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     fe0:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     fe2:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     fe4:	2c00      	cmp	r4, #0
     fe6:	d0f9      	beq.n	fdc <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     fe8:	4b01      	ldr	r3, [pc, #4]	; (ff0 <usart_write_buffer_job+0x1c>)
     fea:	4798      	blx	r3
     fec:	0003      	movs	r3, r0
     fee:	e7f5      	b.n	fdc <usart_write_buffer_job+0x8>
     ff0:	00000f31 	.word	0x00000f31

00000ff4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     ff4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     ff6:	2317      	movs	r3, #23
	if (length == 0) {
     ff8:	2a00      	cmp	r2, #0
     ffa:	d101      	bne.n	1000 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     ffc:	0018      	movs	r0, r3
     ffe:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1000:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1002:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1004:	2c00      	cmp	r4, #0
    1006:	d0f9      	beq.n	ffc <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1008:	4b01      	ldr	r3, [pc, #4]	; (1010 <usart_read_buffer_job+0x1c>)
    100a:	4798      	blx	r3
    100c:	0003      	movs	r3, r0
    100e:	e7f5      	b.n	ffc <usart_read_buffer_job+0x8>
    1010:	00000f6d 	.word	0x00000f6d

00001014 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1016:	0080      	lsls	r0, r0, #2
    1018:	4b62      	ldr	r3, [pc, #392]	; (11a4 <_usart_interrupt_handler+0x190>)
    101a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    101c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    101e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1020:	2b00      	cmp	r3, #0
    1022:	d1fc      	bne.n	101e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1024:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1026:	7da6      	ldrb	r6, [r4, #22]
    1028:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    102a:	2330      	movs	r3, #48	; 0x30
    102c:	5ceb      	ldrb	r3, [r5, r3]
    102e:	2231      	movs	r2, #49	; 0x31
    1030:	5caf      	ldrb	r7, [r5, r2]
    1032:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1034:	07f3      	lsls	r3, r6, #31
    1036:	d522      	bpl.n	107e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1038:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    103a:	b29b      	uxth	r3, r3
    103c:	2b00      	cmp	r3, #0
    103e:	d01c      	beq.n	107a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1040:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1042:	7813      	ldrb	r3, [r2, #0]
    1044:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1046:	1c51      	adds	r1, r2, #1
    1048:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    104a:	7969      	ldrb	r1, [r5, #5]
    104c:	2901      	cmp	r1, #1
    104e:	d00e      	beq.n	106e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1050:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1052:	05db      	lsls	r3, r3, #23
    1054:	0ddb      	lsrs	r3, r3, #23
    1056:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1058:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    105a:	3b01      	subs	r3, #1
    105c:	b29b      	uxth	r3, r3
    105e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1060:	2b00      	cmp	r3, #0
    1062:	d10c      	bne.n	107e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1064:	3301      	adds	r3, #1
    1066:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1068:	3301      	adds	r3, #1
    106a:	75a3      	strb	r3, [r4, #22]
    106c:	e007      	b.n	107e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    106e:	7851      	ldrb	r1, [r2, #1]
    1070:	0209      	lsls	r1, r1, #8
    1072:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1074:	3202      	adds	r2, #2
    1076:	62aa      	str	r2, [r5, #40]	; 0x28
    1078:	e7eb      	b.n	1052 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    107a:	2301      	movs	r3, #1
    107c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    107e:	07b3      	lsls	r3, r6, #30
    1080:	d506      	bpl.n	1090 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1082:	2302      	movs	r3, #2
    1084:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1086:	2200      	movs	r2, #0
    1088:	3331      	adds	r3, #49	; 0x31
    108a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    108c:	07fb      	lsls	r3, r7, #31
    108e:	d41a      	bmi.n	10c6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1090:	0773      	lsls	r3, r6, #29
    1092:	d565      	bpl.n	1160 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1094:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1096:	b29b      	uxth	r3, r3
    1098:	2b00      	cmp	r3, #0
    109a:	d05f      	beq.n	115c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    109c:	8b63      	ldrh	r3, [r4, #26]
    109e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    10a0:	071a      	lsls	r2, r3, #28
    10a2:	d414      	bmi.n	10ce <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    10a4:	223f      	movs	r2, #63	; 0x3f
    10a6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    10a8:	2b00      	cmp	r3, #0
    10aa:	d034      	beq.n	1116 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    10ac:	079a      	lsls	r2, r3, #30
    10ae:	d511      	bpl.n	10d4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    10b0:	221a      	movs	r2, #26
    10b2:	2332      	movs	r3, #50	; 0x32
    10b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    10b6:	3b30      	subs	r3, #48	; 0x30
    10b8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    10ba:	077b      	lsls	r3, r7, #29
    10bc:	d550      	bpl.n	1160 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    10be:	0028      	movs	r0, r5
    10c0:	696b      	ldr	r3, [r5, #20]
    10c2:	4798      	blx	r3
    10c4:	e04c      	b.n	1160 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    10c6:	0028      	movs	r0, r5
    10c8:	68eb      	ldr	r3, [r5, #12]
    10ca:	4798      	blx	r3
    10cc:	e7e0      	b.n	1090 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    10ce:	2237      	movs	r2, #55	; 0x37
    10d0:	4013      	ands	r3, r2
    10d2:	e7e9      	b.n	10a8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    10d4:	075a      	lsls	r2, r3, #29
    10d6:	d505      	bpl.n	10e4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    10d8:	221e      	movs	r2, #30
    10da:	2332      	movs	r3, #50	; 0x32
    10dc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    10de:	3b2e      	subs	r3, #46	; 0x2e
    10e0:	8363      	strh	r3, [r4, #26]
    10e2:	e7ea      	b.n	10ba <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    10e4:	07da      	lsls	r2, r3, #31
    10e6:	d505      	bpl.n	10f4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    10e8:	2213      	movs	r2, #19
    10ea:	2332      	movs	r3, #50	; 0x32
    10ec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    10ee:	3b31      	subs	r3, #49	; 0x31
    10f0:	8363      	strh	r3, [r4, #26]
    10f2:	e7e2      	b.n	10ba <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    10f4:	06da      	lsls	r2, r3, #27
    10f6:	d505      	bpl.n	1104 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    10f8:	2242      	movs	r2, #66	; 0x42
    10fa:	2332      	movs	r3, #50	; 0x32
    10fc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    10fe:	3b22      	subs	r3, #34	; 0x22
    1100:	8363      	strh	r3, [r4, #26]
    1102:	e7da      	b.n	10ba <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1104:	2220      	movs	r2, #32
    1106:	421a      	tst	r2, r3
    1108:	d0d7      	beq.n	10ba <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    110a:	3221      	adds	r2, #33	; 0x21
    110c:	2332      	movs	r3, #50	; 0x32
    110e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1110:	3b12      	subs	r3, #18
    1112:	8363      	strh	r3, [r4, #26]
    1114:	e7d1      	b.n	10ba <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1116:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1118:	05db      	lsls	r3, r3, #23
    111a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    111c:	b2da      	uxtb	r2, r3
    111e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1120:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1122:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1124:	1c51      	adds	r1, r2, #1
    1126:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1128:	7969      	ldrb	r1, [r5, #5]
    112a:	2901      	cmp	r1, #1
    112c:	d010      	beq.n	1150 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    112e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1130:	3b01      	subs	r3, #1
    1132:	b29b      	uxth	r3, r3
    1134:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1136:	2b00      	cmp	r3, #0
    1138:	d112      	bne.n	1160 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    113a:	3304      	adds	r3, #4
    113c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    113e:	2200      	movs	r2, #0
    1140:	332e      	adds	r3, #46	; 0x2e
    1142:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1144:	07bb      	lsls	r3, r7, #30
    1146:	d50b      	bpl.n	1160 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1148:	0028      	movs	r0, r5
    114a:	692b      	ldr	r3, [r5, #16]
    114c:	4798      	blx	r3
    114e:	e007      	b.n	1160 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1150:	0a1b      	lsrs	r3, r3, #8
    1152:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1154:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1156:	3301      	adds	r3, #1
    1158:	626b      	str	r3, [r5, #36]	; 0x24
    115a:	e7e8      	b.n	112e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    115c:	2304      	movs	r3, #4
    115e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1160:	06f3      	lsls	r3, r6, #27
    1162:	d504      	bpl.n	116e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1164:	2310      	movs	r3, #16
    1166:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1168:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    116a:	06fb      	lsls	r3, r7, #27
    116c:	d40e      	bmi.n	118c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    116e:	06b3      	lsls	r3, r6, #26
    1170:	d504      	bpl.n	117c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1172:	2320      	movs	r3, #32
    1174:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1176:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1178:	073b      	lsls	r3, r7, #28
    117a:	d40b      	bmi.n	1194 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    117c:	0733      	lsls	r3, r6, #28
    117e:	d504      	bpl.n	118a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1180:	2308      	movs	r3, #8
    1182:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1184:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1186:	06bb      	lsls	r3, r7, #26
    1188:	d408      	bmi.n	119c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    118c:	0028      	movs	r0, r5
    118e:	69eb      	ldr	r3, [r5, #28]
    1190:	4798      	blx	r3
    1192:	e7ec      	b.n	116e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1194:	0028      	movs	r0, r5
    1196:	69ab      	ldr	r3, [r5, #24]
    1198:	4798      	blx	r3
    119a:	e7ef      	b.n	117c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    119c:	6a2b      	ldr	r3, [r5, #32]
    119e:	0028      	movs	r0, r5
    11a0:	4798      	blx	r3
}
    11a2:	e7f2      	b.n	118a <_usart_interrupt_handler+0x176>
    11a4:	200000ac 	.word	0x200000ac

000011a8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    11a8:	b510      	push	{r4, lr}
	switch (clock_source) {
    11aa:	2808      	cmp	r0, #8
    11ac:	d803      	bhi.n	11b6 <system_clock_source_get_hz+0xe>
    11ae:	0080      	lsls	r0, r0, #2
    11b0:	4b1c      	ldr	r3, [pc, #112]	; (1224 <system_clock_source_get_hz+0x7c>)
    11b2:	581b      	ldr	r3, [r3, r0]
    11b4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    11b6:	2000      	movs	r0, #0
    11b8:	e032      	b.n	1220 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    11ba:	4b1b      	ldr	r3, [pc, #108]	; (1228 <system_clock_source_get_hz+0x80>)
    11bc:	6918      	ldr	r0, [r3, #16]
    11be:	e02f      	b.n	1220 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    11c0:	4b1a      	ldr	r3, [pc, #104]	; (122c <system_clock_source_get_hz+0x84>)
    11c2:	6a1b      	ldr	r3, [r3, #32]
    11c4:	059b      	lsls	r3, r3, #22
    11c6:	0f9b      	lsrs	r3, r3, #30
    11c8:	4819      	ldr	r0, [pc, #100]	; (1230 <system_clock_source_get_hz+0x88>)
    11ca:	40d8      	lsrs	r0, r3
    11cc:	e028      	b.n	1220 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    11ce:	4b16      	ldr	r3, [pc, #88]	; (1228 <system_clock_source_get_hz+0x80>)
    11d0:	6958      	ldr	r0, [r3, #20]
    11d2:	e025      	b.n	1220 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    11d4:	4b14      	ldr	r3, [pc, #80]	; (1228 <system_clock_source_get_hz+0x80>)
    11d6:	681b      	ldr	r3, [r3, #0]
			return 0;
    11d8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    11da:	079b      	lsls	r3, r3, #30
    11dc:	d520      	bpl.n	1220 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    11de:	4913      	ldr	r1, [pc, #76]	; (122c <system_clock_source_get_hz+0x84>)
    11e0:	2210      	movs	r2, #16
    11e2:	68cb      	ldr	r3, [r1, #12]
    11e4:	421a      	tst	r2, r3
    11e6:	d0fc      	beq.n	11e2 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    11e8:	4b0f      	ldr	r3, [pc, #60]	; (1228 <system_clock_source_get_hz+0x80>)
    11ea:	681a      	ldr	r2, [r3, #0]
    11ec:	2324      	movs	r3, #36	; 0x24
    11ee:	4013      	ands	r3, r2
    11f0:	2b04      	cmp	r3, #4
    11f2:	d001      	beq.n	11f8 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    11f4:	480f      	ldr	r0, [pc, #60]	; (1234 <system_clock_source_get_hz+0x8c>)
    11f6:	e013      	b.n	1220 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    11f8:	2000      	movs	r0, #0
    11fa:	4b0f      	ldr	r3, [pc, #60]	; (1238 <system_clock_source_get_hz+0x90>)
    11fc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    11fe:	4b0a      	ldr	r3, [pc, #40]	; (1228 <system_clock_source_get_hz+0x80>)
    1200:	689b      	ldr	r3, [r3, #8]
    1202:	041b      	lsls	r3, r3, #16
    1204:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1206:	4358      	muls	r0, r3
    1208:	e00a      	b.n	1220 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    120a:	2350      	movs	r3, #80	; 0x50
    120c:	4a07      	ldr	r2, [pc, #28]	; (122c <system_clock_source_get_hz+0x84>)
    120e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1210:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1212:	075b      	lsls	r3, r3, #29
    1214:	d504      	bpl.n	1220 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1216:	4b04      	ldr	r3, [pc, #16]	; (1228 <system_clock_source_get_hz+0x80>)
    1218:	68d8      	ldr	r0, [r3, #12]
    121a:	e001      	b.n	1220 <system_clock_source_get_hz+0x78>
		return 32768UL;
    121c:	2080      	movs	r0, #128	; 0x80
    121e:	0200      	lsls	r0, r0, #8
	}
}
    1220:	bd10      	pop	{r4, pc}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	00001ee8 	.word	0x00001ee8
    1228:	20000048 	.word	0x20000048
    122c:	40000800 	.word	0x40000800
    1230:	007a1200 	.word	0x007a1200
    1234:	02dc6c00 	.word	0x02dc6c00
    1238:	0000160d 	.word	0x0000160d

0000123c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    123c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    123e:	490c      	ldr	r1, [pc, #48]	; (1270 <system_clock_source_osc8m_set_config+0x34>)
    1240:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1242:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1244:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1246:	7840      	ldrb	r0, [r0, #1]
    1248:	2201      	movs	r2, #1
    124a:	4010      	ands	r0, r2
    124c:	0180      	lsls	r0, r0, #6
    124e:	2640      	movs	r6, #64	; 0x40
    1250:	43b3      	bics	r3, r6
    1252:	4303      	orrs	r3, r0
    1254:	402a      	ands	r2, r5
    1256:	01d2      	lsls	r2, r2, #7
    1258:	2080      	movs	r0, #128	; 0x80
    125a:	4383      	bics	r3, r0
    125c:	4313      	orrs	r3, r2
    125e:	2203      	movs	r2, #3
    1260:	4022      	ands	r2, r4
    1262:	0212      	lsls	r2, r2, #8
    1264:	4803      	ldr	r0, [pc, #12]	; (1274 <system_clock_source_osc8m_set_config+0x38>)
    1266:	4003      	ands	r3, r0
    1268:	4313      	orrs	r3, r2
    126a:	620b      	str	r3, [r1, #32]
}
    126c:	bd70      	pop	{r4, r5, r6, pc}
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	40000800 	.word	0x40000800
    1274:	fffffcff 	.word	0xfffffcff

00001278 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1278:	2808      	cmp	r0, #8
    127a:	d803      	bhi.n	1284 <system_clock_source_enable+0xc>
    127c:	0080      	lsls	r0, r0, #2
    127e:	4b25      	ldr	r3, [pc, #148]	; (1314 <system_clock_source_enable+0x9c>)
    1280:	581b      	ldr	r3, [r3, r0]
    1282:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1284:	2017      	movs	r0, #23
    1286:	e044      	b.n	1312 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1288:	4a23      	ldr	r2, [pc, #140]	; (1318 <system_clock_source_enable+0xa0>)
    128a:	6a13      	ldr	r3, [r2, #32]
    128c:	2102      	movs	r1, #2
    128e:	430b      	orrs	r3, r1
    1290:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1292:	2000      	movs	r0, #0
    1294:	e03d      	b.n	1312 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1296:	4a20      	ldr	r2, [pc, #128]	; (1318 <system_clock_source_enable+0xa0>)
    1298:	6993      	ldr	r3, [r2, #24]
    129a:	2102      	movs	r1, #2
    129c:	430b      	orrs	r3, r1
    129e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    12a0:	2000      	movs	r0, #0
		break;
    12a2:	e036      	b.n	1312 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    12a4:	4a1c      	ldr	r2, [pc, #112]	; (1318 <system_clock_source_enable+0xa0>)
    12a6:	8a13      	ldrh	r3, [r2, #16]
    12a8:	2102      	movs	r1, #2
    12aa:	430b      	orrs	r3, r1
    12ac:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    12ae:	2000      	movs	r0, #0
		break;
    12b0:	e02f      	b.n	1312 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    12b2:	4a19      	ldr	r2, [pc, #100]	; (1318 <system_clock_source_enable+0xa0>)
    12b4:	8a93      	ldrh	r3, [r2, #20]
    12b6:	2102      	movs	r1, #2
    12b8:	430b      	orrs	r3, r1
    12ba:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    12bc:	2000      	movs	r0, #0
		break;
    12be:	e028      	b.n	1312 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    12c0:	4916      	ldr	r1, [pc, #88]	; (131c <system_clock_source_enable+0xa4>)
    12c2:	680b      	ldr	r3, [r1, #0]
    12c4:	2202      	movs	r2, #2
    12c6:	4313      	orrs	r3, r2
    12c8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    12ca:	4b13      	ldr	r3, [pc, #76]	; (1318 <system_clock_source_enable+0xa0>)
    12cc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    12ce:	0019      	movs	r1, r3
    12d0:	320e      	adds	r2, #14
    12d2:	68cb      	ldr	r3, [r1, #12]
    12d4:	421a      	tst	r2, r3
    12d6:	d0fc      	beq.n	12d2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    12d8:	4a10      	ldr	r2, [pc, #64]	; (131c <system_clock_source_enable+0xa4>)
    12da:	6891      	ldr	r1, [r2, #8]
    12dc:	4b0e      	ldr	r3, [pc, #56]	; (1318 <system_clock_source_enable+0xa0>)
    12de:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    12e0:	6852      	ldr	r2, [r2, #4]
    12e2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    12e4:	2200      	movs	r2, #0
    12e6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    12e8:	0019      	movs	r1, r3
    12ea:	3210      	adds	r2, #16
    12ec:	68cb      	ldr	r3, [r1, #12]
    12ee:	421a      	tst	r2, r3
    12f0:	d0fc      	beq.n	12ec <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    12f2:	4b0a      	ldr	r3, [pc, #40]	; (131c <system_clock_source_enable+0xa4>)
    12f4:	681b      	ldr	r3, [r3, #0]
    12f6:	b29b      	uxth	r3, r3
    12f8:	4a07      	ldr	r2, [pc, #28]	; (1318 <system_clock_source_enable+0xa0>)
    12fa:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    12fc:	2000      	movs	r0, #0
    12fe:	e008      	b.n	1312 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1300:	4905      	ldr	r1, [pc, #20]	; (1318 <system_clock_source_enable+0xa0>)
    1302:	2244      	movs	r2, #68	; 0x44
    1304:	5c8b      	ldrb	r3, [r1, r2]
    1306:	2002      	movs	r0, #2
    1308:	4303      	orrs	r3, r0
    130a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    130c:	2000      	movs	r0, #0
		break;
    130e:	e000      	b.n	1312 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1310:	2000      	movs	r0, #0
}
    1312:	4770      	bx	lr
    1314:	00001f0c 	.word	0x00001f0c
    1318:	40000800 	.word	0x40000800
    131c:	20000048 	.word	0x20000048

00001320 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1320:	b530      	push	{r4, r5, lr}
    1322:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1324:	22c2      	movs	r2, #194	; 0xc2
    1326:	00d2      	lsls	r2, r2, #3
    1328:	4b1a      	ldr	r3, [pc, #104]	; (1394 <system_clock_init+0x74>)
    132a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    132c:	4a1a      	ldr	r2, [pc, #104]	; (1398 <system_clock_init+0x78>)
    132e:	6853      	ldr	r3, [r2, #4]
    1330:	211e      	movs	r1, #30
    1332:	438b      	bics	r3, r1
    1334:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1336:	2301      	movs	r3, #1
    1338:	466a      	mov	r2, sp
    133a:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    133c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    133e:	4d17      	ldr	r5, [pc, #92]	; (139c <system_clock_init+0x7c>)
    1340:	b2e0      	uxtb	r0, r4
    1342:	4669      	mov	r1, sp
    1344:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1346:	3401      	adds	r4, #1
    1348:	2c18      	cmp	r4, #24
    134a:	d1f9      	bne.n	1340 <system_clock_init+0x20>
	config->run_in_standby  = false;
    134c:	a803      	add	r0, sp, #12
    134e:	2400      	movs	r4, #0
    1350:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1352:	2501      	movs	r5, #1
    1354:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1356:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1358:	4b11      	ldr	r3, [pc, #68]	; (13a0 <system_clock_init+0x80>)
    135a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    135c:	2006      	movs	r0, #6
    135e:	4b11      	ldr	r3, [pc, #68]	; (13a4 <system_clock_init+0x84>)
    1360:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1362:	4b11      	ldr	r3, [pc, #68]	; (13a8 <system_clock_init+0x88>)
    1364:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1366:	4b11      	ldr	r3, [pc, #68]	; (13ac <system_clock_init+0x8c>)
    1368:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    136a:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    136c:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    136e:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1370:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1372:	466b      	mov	r3, sp
    1374:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1376:	2306      	movs	r3, #6
    1378:	466a      	mov	r2, sp
    137a:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    137c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    137e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1380:	4669      	mov	r1, sp
    1382:	2000      	movs	r0, #0
    1384:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <system_clock_init+0x90>)
    1386:	4798      	blx	r3
    1388:	2000      	movs	r0, #0
    138a:	4b0a      	ldr	r3, [pc, #40]	; (13b4 <system_clock_init+0x94>)
    138c:	4798      	blx	r3
#endif
}
    138e:	b005      	add	sp, #20
    1390:	bd30      	pop	{r4, r5, pc}
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	40000800 	.word	0x40000800
    1398:	41004000 	.word	0x41004000
    139c:	000015f1 	.word	0x000015f1
    13a0:	0000123d 	.word	0x0000123d
    13a4:	00001279 	.word	0x00001279
    13a8:	000013b9 	.word	0x000013b9
    13ac:	40000400 	.word	0x40000400
    13b0:	000013dd 	.word	0x000013dd
    13b4:	00001495 	.word	0x00001495

000013b8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    13b8:	4a06      	ldr	r2, [pc, #24]	; (13d4 <system_gclk_init+0x1c>)
    13ba:	6993      	ldr	r3, [r2, #24]
    13bc:	2108      	movs	r1, #8
    13be:	430b      	orrs	r3, r1
    13c0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    13c2:	2201      	movs	r2, #1
    13c4:	4b04      	ldr	r3, [pc, #16]	; (13d8 <system_gclk_init+0x20>)
    13c6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    13c8:	0019      	movs	r1, r3
    13ca:	780b      	ldrb	r3, [r1, #0]
    13cc:	4213      	tst	r3, r2
    13ce:	d1fc      	bne.n	13ca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    13d0:	4770      	bx	lr
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	40000400 	.word	0x40000400
    13d8:	40000c00 	.word	0x40000c00

000013dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    13dc:	b570      	push	{r4, r5, r6, lr}
    13de:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    13e0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    13e2:	780d      	ldrb	r5, [r1, #0]
    13e4:	022d      	lsls	r5, r5, #8
    13e6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    13e8:	784b      	ldrb	r3, [r1, #1]
    13ea:	2b00      	cmp	r3, #0
    13ec:	d002      	beq.n	13f4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    13ee:	2380      	movs	r3, #128	; 0x80
    13f0:	02db      	lsls	r3, r3, #11
    13f2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    13f4:	7a4b      	ldrb	r3, [r1, #9]
    13f6:	2b00      	cmp	r3, #0
    13f8:	d002      	beq.n	1400 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    13fa:	2380      	movs	r3, #128	; 0x80
    13fc:	031b      	lsls	r3, r3, #12
    13fe:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1400:	6848      	ldr	r0, [r1, #4]
    1402:	2801      	cmp	r0, #1
    1404:	d910      	bls.n	1428 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1406:	1e43      	subs	r3, r0, #1
    1408:	4218      	tst	r0, r3
    140a:	d134      	bne.n	1476 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    140c:	2802      	cmp	r0, #2
    140e:	d930      	bls.n	1472 <system_gclk_gen_set_config+0x96>
    1410:	2302      	movs	r3, #2
    1412:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1414:	3201      	adds	r2, #1
						mask <<= 1) {
    1416:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1418:	4298      	cmp	r0, r3
    141a:	d8fb      	bhi.n	1414 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    141c:	0212      	lsls	r2, r2, #8
    141e:	4332      	orrs	r2, r6
    1420:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1422:	2380      	movs	r3, #128	; 0x80
    1424:	035b      	lsls	r3, r3, #13
    1426:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1428:	7a0b      	ldrb	r3, [r1, #8]
    142a:	2b00      	cmp	r3, #0
    142c:	d002      	beq.n	1434 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    142e:	2380      	movs	r3, #128	; 0x80
    1430:	039b      	lsls	r3, r3, #14
    1432:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1434:	4a13      	ldr	r2, [pc, #76]	; (1484 <system_gclk_gen_set_config+0xa8>)
    1436:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1438:	b25b      	sxtb	r3, r3
    143a:	2b00      	cmp	r3, #0
    143c:	dbfb      	blt.n	1436 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    143e:	4b12      	ldr	r3, [pc, #72]	; (1488 <system_gclk_gen_set_config+0xac>)
    1440:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1442:	4b12      	ldr	r3, [pc, #72]	; (148c <system_gclk_gen_set_config+0xb0>)
    1444:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1446:	4a0f      	ldr	r2, [pc, #60]	; (1484 <system_gclk_gen_set_config+0xa8>)
    1448:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    144a:	b25b      	sxtb	r3, r3
    144c:	2b00      	cmp	r3, #0
    144e:	dbfb      	blt.n	1448 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1450:	4b0c      	ldr	r3, [pc, #48]	; (1484 <system_gclk_gen_set_config+0xa8>)
    1452:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1454:	001a      	movs	r2, r3
    1456:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1458:	b25b      	sxtb	r3, r3
    145a:	2b00      	cmp	r3, #0
    145c:	dbfb      	blt.n	1456 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    145e:	4a09      	ldr	r2, [pc, #36]	; (1484 <system_gclk_gen_set_config+0xa8>)
    1460:	6853      	ldr	r3, [r2, #4]
    1462:	2180      	movs	r1, #128	; 0x80
    1464:	0249      	lsls	r1, r1, #9
    1466:	400b      	ands	r3, r1
    1468:	431d      	orrs	r5, r3
    146a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    146c:	4b08      	ldr	r3, [pc, #32]	; (1490 <system_gclk_gen_set_config+0xb4>)
    146e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1470:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1472:	2200      	movs	r2, #0
    1474:	e7d2      	b.n	141c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1476:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1478:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    147a:	2380      	movs	r3, #128	; 0x80
    147c:	029b      	lsls	r3, r3, #10
    147e:	431d      	orrs	r5, r3
    1480:	e7d2      	b.n	1428 <system_gclk_gen_set_config+0x4c>
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	40000c00 	.word	0x40000c00
    1488:	000000ed 	.word	0x000000ed
    148c:	40000c08 	.word	0x40000c08
    1490:	0000012d 	.word	0x0000012d

00001494 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1494:	b510      	push	{r4, lr}
    1496:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1498:	4a0b      	ldr	r2, [pc, #44]	; (14c8 <system_gclk_gen_enable+0x34>)
    149a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    149c:	b25b      	sxtb	r3, r3
    149e:	2b00      	cmp	r3, #0
    14a0:	dbfb      	blt.n	149a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    14a2:	4b0a      	ldr	r3, [pc, #40]	; (14cc <system_gclk_gen_enable+0x38>)
    14a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    14a6:	4b0a      	ldr	r3, [pc, #40]	; (14d0 <system_gclk_gen_enable+0x3c>)
    14a8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14aa:	4a07      	ldr	r2, [pc, #28]	; (14c8 <system_gclk_gen_enable+0x34>)
    14ac:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    14ae:	b25b      	sxtb	r3, r3
    14b0:	2b00      	cmp	r3, #0
    14b2:	dbfb      	blt.n	14ac <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    14b4:	4a04      	ldr	r2, [pc, #16]	; (14c8 <system_gclk_gen_enable+0x34>)
    14b6:	6851      	ldr	r1, [r2, #4]
    14b8:	2380      	movs	r3, #128	; 0x80
    14ba:	025b      	lsls	r3, r3, #9
    14bc:	430b      	orrs	r3, r1
    14be:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    14c0:	4b04      	ldr	r3, [pc, #16]	; (14d4 <system_gclk_gen_enable+0x40>)
    14c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14c4:	bd10      	pop	{r4, pc}
    14c6:	46c0      	nop			; (mov r8, r8)
    14c8:	40000c00 	.word	0x40000c00
    14cc:	000000ed 	.word	0x000000ed
    14d0:	40000c04 	.word	0x40000c04
    14d4:	0000012d 	.word	0x0000012d

000014d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    14d8:	b570      	push	{r4, r5, r6, lr}
    14da:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14dc:	4a1a      	ldr	r2, [pc, #104]	; (1548 <system_gclk_gen_get_hz+0x70>)
    14de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    14e0:	b25b      	sxtb	r3, r3
    14e2:	2b00      	cmp	r3, #0
    14e4:	dbfb      	blt.n	14de <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    14e6:	4b19      	ldr	r3, [pc, #100]	; (154c <system_gclk_gen_get_hz+0x74>)
    14e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    14ea:	4b19      	ldr	r3, [pc, #100]	; (1550 <system_gclk_gen_get_hz+0x78>)
    14ec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14ee:	4a16      	ldr	r2, [pc, #88]	; (1548 <system_gclk_gen_get_hz+0x70>)
    14f0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    14f2:	b25b      	sxtb	r3, r3
    14f4:	2b00      	cmp	r3, #0
    14f6:	dbfb      	blt.n	14f0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    14f8:	4e13      	ldr	r6, [pc, #76]	; (1548 <system_gclk_gen_get_hz+0x70>)
    14fa:	6870      	ldr	r0, [r6, #4]
    14fc:	04c0      	lsls	r0, r0, #19
    14fe:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1500:	4b14      	ldr	r3, [pc, #80]	; (1554 <system_gclk_gen_get_hz+0x7c>)
    1502:	4798      	blx	r3
    1504:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1506:	4b12      	ldr	r3, [pc, #72]	; (1550 <system_gclk_gen_get_hz+0x78>)
    1508:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    150a:	6876      	ldr	r6, [r6, #4]
    150c:	02f6      	lsls	r6, r6, #11
    150e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1510:	4b11      	ldr	r3, [pc, #68]	; (1558 <system_gclk_gen_get_hz+0x80>)
    1512:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1514:	4a0c      	ldr	r2, [pc, #48]	; (1548 <system_gclk_gen_get_hz+0x70>)
    1516:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1518:	b25b      	sxtb	r3, r3
    151a:	2b00      	cmp	r3, #0
    151c:	dbfb      	blt.n	1516 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    151e:	4b0a      	ldr	r3, [pc, #40]	; (1548 <system_gclk_gen_get_hz+0x70>)
    1520:	689c      	ldr	r4, [r3, #8]
    1522:	0224      	lsls	r4, r4, #8
    1524:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1526:	4b0d      	ldr	r3, [pc, #52]	; (155c <system_gclk_gen_get_hz+0x84>)
    1528:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    152a:	2e00      	cmp	r6, #0
    152c:	d107      	bne.n	153e <system_gclk_gen_get_hz+0x66>
    152e:	2c01      	cmp	r4, #1
    1530:	d907      	bls.n	1542 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1532:	0021      	movs	r1, r4
    1534:	0028      	movs	r0, r5
    1536:	4b0a      	ldr	r3, [pc, #40]	; (1560 <system_gclk_gen_get_hz+0x88>)
    1538:	4798      	blx	r3
    153a:	0005      	movs	r5, r0
    153c:	e001      	b.n	1542 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    153e:	3401      	adds	r4, #1
    1540:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1542:	0028      	movs	r0, r5
    1544:	bd70      	pop	{r4, r5, r6, pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	40000c00 	.word	0x40000c00
    154c:	000000ed 	.word	0x000000ed
    1550:	40000c04 	.word	0x40000c04
    1554:	000011a9 	.word	0x000011a9
    1558:	40000c08 	.word	0x40000c08
    155c:	0000012d 	.word	0x0000012d
    1560:	00001bf1 	.word	0x00001bf1

00001564 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1564:	b510      	push	{r4, lr}
    1566:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1568:	4b06      	ldr	r3, [pc, #24]	; (1584 <system_gclk_chan_enable+0x20>)
    156a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    156c:	4b06      	ldr	r3, [pc, #24]	; (1588 <system_gclk_chan_enable+0x24>)
    156e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1570:	4a06      	ldr	r2, [pc, #24]	; (158c <system_gclk_chan_enable+0x28>)
    1572:	8853      	ldrh	r3, [r2, #2]
    1574:	2180      	movs	r1, #128	; 0x80
    1576:	01c9      	lsls	r1, r1, #7
    1578:	430b      	orrs	r3, r1
    157a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    157c:	4b04      	ldr	r3, [pc, #16]	; (1590 <system_gclk_chan_enable+0x2c>)
    157e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1580:	bd10      	pop	{r4, pc}
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	000000ed 	.word	0x000000ed
    1588:	40000c02 	.word	0x40000c02
    158c:	40000c00 	.word	0x40000c00
    1590:	0000012d 	.word	0x0000012d

00001594 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1594:	b510      	push	{r4, lr}
    1596:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1598:	4b0f      	ldr	r3, [pc, #60]	; (15d8 <system_gclk_chan_disable+0x44>)
    159a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    159c:	4b0f      	ldr	r3, [pc, #60]	; (15dc <system_gclk_chan_disable+0x48>)
    159e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    15a0:	4a0f      	ldr	r2, [pc, #60]	; (15e0 <system_gclk_chan_disable+0x4c>)
    15a2:	8853      	ldrh	r3, [r2, #2]
    15a4:	051b      	lsls	r3, r3, #20
    15a6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    15a8:	8853      	ldrh	r3, [r2, #2]
    15aa:	490e      	ldr	r1, [pc, #56]	; (15e4 <system_gclk_chan_disable+0x50>)
    15ac:	400b      	ands	r3, r1
    15ae:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    15b0:	8853      	ldrh	r3, [r2, #2]
    15b2:	490d      	ldr	r1, [pc, #52]	; (15e8 <system_gclk_chan_disable+0x54>)
    15b4:	400b      	ands	r3, r1
    15b6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    15b8:	0011      	movs	r1, r2
    15ba:	2280      	movs	r2, #128	; 0x80
    15bc:	01d2      	lsls	r2, r2, #7
    15be:	884b      	ldrh	r3, [r1, #2]
    15c0:	4213      	tst	r3, r2
    15c2:	d1fc      	bne.n	15be <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    15c4:	4906      	ldr	r1, [pc, #24]	; (15e0 <system_gclk_chan_disable+0x4c>)
    15c6:	884a      	ldrh	r2, [r1, #2]
    15c8:	0203      	lsls	r3, r0, #8
    15ca:	4806      	ldr	r0, [pc, #24]	; (15e4 <system_gclk_chan_disable+0x50>)
    15cc:	4002      	ands	r2, r0
    15ce:	4313      	orrs	r3, r2
    15d0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    15d2:	4b06      	ldr	r3, [pc, #24]	; (15ec <system_gclk_chan_disable+0x58>)
    15d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15d6:	bd10      	pop	{r4, pc}
    15d8:	000000ed 	.word	0x000000ed
    15dc:	40000c02 	.word	0x40000c02
    15e0:	40000c00 	.word	0x40000c00
    15e4:	fffff0ff 	.word	0xfffff0ff
    15e8:	ffffbfff 	.word	0xffffbfff
    15ec:	0000012d 	.word	0x0000012d

000015f0 <system_gclk_chan_set_config>:
{
    15f0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    15f2:	780c      	ldrb	r4, [r1, #0]
    15f4:	0224      	lsls	r4, r4, #8
    15f6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    15f8:	4b02      	ldr	r3, [pc, #8]	; (1604 <system_gclk_chan_set_config+0x14>)
    15fa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    15fc:	b2a4      	uxth	r4, r4
    15fe:	4b02      	ldr	r3, [pc, #8]	; (1608 <system_gclk_chan_set_config+0x18>)
    1600:	805c      	strh	r4, [r3, #2]
}
    1602:	bd10      	pop	{r4, pc}
    1604:	00001595 	.word	0x00001595
    1608:	40000c00 	.word	0x40000c00

0000160c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    160c:	b510      	push	{r4, lr}
    160e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1610:	4b06      	ldr	r3, [pc, #24]	; (162c <system_gclk_chan_get_hz+0x20>)
    1612:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1614:	4b06      	ldr	r3, [pc, #24]	; (1630 <system_gclk_chan_get_hz+0x24>)
    1616:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1618:	4b06      	ldr	r3, [pc, #24]	; (1634 <system_gclk_chan_get_hz+0x28>)
    161a:	885c      	ldrh	r4, [r3, #2]
    161c:	0524      	lsls	r4, r4, #20
    161e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1620:	4b05      	ldr	r3, [pc, #20]	; (1638 <system_gclk_chan_get_hz+0x2c>)
    1622:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1624:	0020      	movs	r0, r4
    1626:	4b05      	ldr	r3, [pc, #20]	; (163c <system_gclk_chan_get_hz+0x30>)
    1628:	4798      	blx	r3
}
    162a:	bd10      	pop	{r4, pc}
    162c:	000000ed 	.word	0x000000ed
    1630:	40000c02 	.word	0x40000c02
    1634:	40000c00 	.word	0x40000c00
    1638:	0000012d 	.word	0x0000012d
    163c:	000014d9 	.word	0x000014d9

00001640 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1640:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1642:	78d3      	ldrb	r3, [r2, #3]
    1644:	2b00      	cmp	r3, #0
    1646:	d135      	bne.n	16b4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1648:	7813      	ldrb	r3, [r2, #0]
    164a:	2b80      	cmp	r3, #128	; 0x80
    164c:	d029      	beq.n	16a2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    164e:	061b      	lsls	r3, r3, #24
    1650:	2480      	movs	r4, #128	; 0x80
    1652:	0264      	lsls	r4, r4, #9
    1654:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1656:	7854      	ldrb	r4, [r2, #1]
    1658:	2502      	movs	r5, #2
    165a:	43ac      	bics	r4, r5
    165c:	d106      	bne.n	166c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    165e:	7894      	ldrb	r4, [r2, #2]
    1660:	2c00      	cmp	r4, #0
    1662:	d120      	bne.n	16a6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1664:	2480      	movs	r4, #128	; 0x80
    1666:	02a4      	lsls	r4, r4, #10
    1668:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    166a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    166c:	7854      	ldrb	r4, [r2, #1]
    166e:	3c01      	subs	r4, #1
    1670:	2c01      	cmp	r4, #1
    1672:	d91c      	bls.n	16ae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1674:	040d      	lsls	r5, r1, #16
    1676:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1678:	24a0      	movs	r4, #160	; 0xa0
    167a:	05e4      	lsls	r4, r4, #23
    167c:	432c      	orrs	r4, r5
    167e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1680:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1682:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1684:	24d0      	movs	r4, #208	; 0xd0
    1686:	0624      	lsls	r4, r4, #24
    1688:	432c      	orrs	r4, r5
    168a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    168c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    168e:	78d4      	ldrb	r4, [r2, #3]
    1690:	2c00      	cmp	r4, #0
    1692:	d122      	bne.n	16da <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1694:	035b      	lsls	r3, r3, #13
    1696:	d51c      	bpl.n	16d2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1698:	7893      	ldrb	r3, [r2, #2]
    169a:	2b01      	cmp	r3, #1
    169c:	d01e      	beq.n	16dc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    169e:	6141      	str	r1, [r0, #20]
    16a0:	e017      	b.n	16d2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    16a2:	2300      	movs	r3, #0
    16a4:	e7d7      	b.n	1656 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    16a6:	24c0      	movs	r4, #192	; 0xc0
    16a8:	02e4      	lsls	r4, r4, #11
    16aa:	4323      	orrs	r3, r4
    16ac:	e7dd      	b.n	166a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    16ae:	4c0d      	ldr	r4, [pc, #52]	; (16e4 <_system_pinmux_config+0xa4>)
    16b0:	4023      	ands	r3, r4
    16b2:	e7df      	b.n	1674 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    16b4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    16b6:	040c      	lsls	r4, r1, #16
    16b8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    16ba:	23a0      	movs	r3, #160	; 0xa0
    16bc:	05db      	lsls	r3, r3, #23
    16be:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    16c0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    16c2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    16c4:	23d0      	movs	r3, #208	; 0xd0
    16c6:	061b      	lsls	r3, r3, #24
    16c8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    16ca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    16cc:	78d3      	ldrb	r3, [r2, #3]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d103      	bne.n	16da <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    16d2:	7853      	ldrb	r3, [r2, #1]
    16d4:	3b01      	subs	r3, #1
    16d6:	2b01      	cmp	r3, #1
    16d8:	d902      	bls.n	16e0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    16da:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    16dc:	6181      	str	r1, [r0, #24]
    16de:	e7f8      	b.n	16d2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    16e0:	6081      	str	r1, [r0, #8]
}
    16e2:	e7fa      	b.n	16da <_system_pinmux_config+0x9a>
    16e4:	fffbffff 	.word	0xfffbffff

000016e8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    16e8:	b510      	push	{r4, lr}
    16ea:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    16ec:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    16ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    16f0:	2900      	cmp	r1, #0
    16f2:	d104      	bne.n	16fe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    16f4:	0943      	lsrs	r3, r0, #5
    16f6:	01db      	lsls	r3, r3, #7
    16f8:	4905      	ldr	r1, [pc, #20]	; (1710 <system_pinmux_pin_set_config+0x28>)
    16fa:	468c      	mov	ip, r1
    16fc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    16fe:	241f      	movs	r4, #31
    1700:	4020      	ands	r0, r4
    1702:	2101      	movs	r1, #1
    1704:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1706:	0018      	movs	r0, r3
    1708:	4b02      	ldr	r3, [pc, #8]	; (1714 <system_pinmux_pin_set_config+0x2c>)
    170a:	4798      	blx	r3
}
    170c:	bd10      	pop	{r4, pc}
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	41004400 	.word	0x41004400
    1714:	00001641 	.word	0x00001641

00001718 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1718:	4770      	bx	lr
	...

0000171c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    171c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    171e:	4b05      	ldr	r3, [pc, #20]	; (1734 <system_init+0x18>)
    1720:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1722:	4b05      	ldr	r3, [pc, #20]	; (1738 <system_init+0x1c>)
    1724:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1726:	4b05      	ldr	r3, [pc, #20]	; (173c <system_init+0x20>)
    1728:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    172a:	4b05      	ldr	r3, [pc, #20]	; (1740 <system_init+0x24>)
    172c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    172e:	4b05      	ldr	r3, [pc, #20]	; (1744 <system_init+0x28>)
    1730:	4798      	blx	r3
}
    1732:	bd10      	pop	{r4, pc}
    1734:	00001321 	.word	0x00001321
    1738:	0000015d 	.word	0x0000015d
    173c:	00001719 	.word	0x00001719
    1740:	00000735 	.word	0x00000735
    1744:	00001719 	.word	0x00001719

00001748 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1748:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    174a:	0080      	lsls	r0, r0, #2
    174c:	4b16      	ldr	r3, [pc, #88]	; (17a8 <_tc_interrupt_handler+0x60>)
    174e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1750:	6823      	ldr	r3, [r4, #0]
    1752:	7b9d      	ldrb	r5, [r3, #14]
    1754:	7e22      	ldrb	r2, [r4, #24]
    1756:	7e63      	ldrb	r3, [r4, #25]
    1758:	4013      	ands	r3, r2
    175a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    175c:	07eb      	lsls	r3, r5, #31
    175e:	d406      	bmi.n	176e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1760:	07ab      	lsls	r3, r5, #30
    1762:	d40b      	bmi.n	177c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1764:	06eb      	lsls	r3, r5, #27
    1766:	d410      	bmi.n	178a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1768:	06ab      	lsls	r3, r5, #26
    176a:	d415      	bmi.n	1798 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    176c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    176e:	0020      	movs	r0, r4
    1770:	68a3      	ldr	r3, [r4, #8]
    1772:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1774:	2301      	movs	r3, #1
    1776:	6822      	ldr	r2, [r4, #0]
    1778:	7393      	strb	r3, [r2, #14]
    177a:	e7f1      	b.n	1760 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    177c:	0020      	movs	r0, r4
    177e:	68e3      	ldr	r3, [r4, #12]
    1780:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1782:	2302      	movs	r3, #2
    1784:	6822      	ldr	r2, [r4, #0]
    1786:	7393      	strb	r3, [r2, #14]
    1788:	e7ec      	b.n	1764 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    178a:	0020      	movs	r0, r4
    178c:	6923      	ldr	r3, [r4, #16]
    178e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1790:	2310      	movs	r3, #16
    1792:	6822      	ldr	r2, [r4, #0]
    1794:	7393      	strb	r3, [r2, #14]
    1796:	e7e7      	b.n	1768 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1798:	0020      	movs	r0, r4
    179a:	6963      	ldr	r3, [r4, #20]
    179c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    179e:	6823      	ldr	r3, [r4, #0]
    17a0:	2220      	movs	r2, #32
    17a2:	739a      	strb	r2, [r3, #14]
}
    17a4:	e7e2      	b.n	176c <_tc_interrupt_handler+0x24>
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	200000b8 	.word	0x200000b8

000017ac <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    17ac:	b510      	push	{r4, lr}
    17ae:	2000      	movs	r0, #0
    17b0:	4b01      	ldr	r3, [pc, #4]	; (17b8 <TC1_Handler+0xc>)
    17b2:	4798      	blx	r3
    17b4:	bd10      	pop	{r4, pc}
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	00001749 	.word	0x00001749

000017bc <TC2_Handler>:
    17bc:	b510      	push	{r4, lr}
    17be:	2001      	movs	r0, #1
    17c0:	4b01      	ldr	r3, [pc, #4]	; (17c8 <TC2_Handler+0xc>)
    17c2:	4798      	blx	r3
    17c4:	bd10      	pop	{r4, pc}
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	00001749 	.word	0x00001749

000017cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    17cc:	e7fe      	b.n	17cc <Dummy_Handler>
	...

000017d0 <Reset_Handler>:
{
    17d0:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    17d2:	4a26      	ldr	r2, [pc, #152]	; (186c <Reset_Handler+0x9c>)
    17d4:	4b26      	ldr	r3, [pc, #152]	; (1870 <Reset_Handler+0xa0>)
    17d6:	429a      	cmp	r2, r3
    17d8:	d011      	beq.n	17fe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    17da:	001a      	movs	r2, r3
    17dc:	4b25      	ldr	r3, [pc, #148]	; (1874 <Reset_Handler+0xa4>)
    17de:	429a      	cmp	r2, r3
    17e0:	d20d      	bcs.n	17fe <Reset_Handler+0x2e>
    17e2:	4a25      	ldr	r2, [pc, #148]	; (1878 <Reset_Handler+0xa8>)
    17e4:	3303      	adds	r3, #3
    17e6:	1a9b      	subs	r3, r3, r2
    17e8:	089b      	lsrs	r3, r3, #2
    17ea:	3301      	adds	r3, #1
    17ec:	009b      	lsls	r3, r3, #2
    17ee:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    17f0:	481f      	ldr	r0, [pc, #124]	; (1870 <Reset_Handler+0xa0>)
    17f2:	491e      	ldr	r1, [pc, #120]	; (186c <Reset_Handler+0x9c>)
    17f4:	588c      	ldr	r4, [r1, r2]
    17f6:	5084      	str	r4, [r0, r2]
    17f8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    17fa:	429a      	cmp	r2, r3
    17fc:	d1fa      	bne.n	17f4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    17fe:	4a1f      	ldr	r2, [pc, #124]	; (187c <Reset_Handler+0xac>)
    1800:	4b1f      	ldr	r3, [pc, #124]	; (1880 <Reset_Handler+0xb0>)
    1802:	429a      	cmp	r2, r3
    1804:	d20a      	bcs.n	181c <Reset_Handler+0x4c>
    1806:	43d3      	mvns	r3, r2
    1808:	491d      	ldr	r1, [pc, #116]	; (1880 <Reset_Handler+0xb0>)
    180a:	185b      	adds	r3, r3, r1
    180c:	2103      	movs	r1, #3
    180e:	438b      	bics	r3, r1
    1810:	3304      	adds	r3, #4
    1812:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1814:	2100      	movs	r1, #0
    1816:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1818:	4293      	cmp	r3, r2
    181a:	d1fc      	bne.n	1816 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    181c:	4a19      	ldr	r2, [pc, #100]	; (1884 <Reset_Handler+0xb4>)
    181e:	21ff      	movs	r1, #255	; 0xff
    1820:	4b19      	ldr	r3, [pc, #100]	; (1888 <Reset_Handler+0xb8>)
    1822:	438b      	bics	r3, r1
    1824:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1826:	39fd      	subs	r1, #253	; 0xfd
    1828:	2390      	movs	r3, #144	; 0x90
    182a:	005b      	lsls	r3, r3, #1
    182c:	4a17      	ldr	r2, [pc, #92]	; (188c <Reset_Handler+0xbc>)
    182e:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1830:	4b17      	ldr	r3, [pc, #92]	; (1890 <Reset_Handler+0xc0>)
    1832:	7b9a      	ldrb	r2, [r3, #14]
    1834:	312e      	adds	r1, #46	; 0x2e
    1836:	438a      	bics	r2, r1
    1838:	2120      	movs	r1, #32
    183a:	430a      	orrs	r2, r1
    183c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    183e:	7b9a      	ldrb	r2, [r3, #14]
    1840:	210c      	movs	r1, #12
    1842:	438a      	bics	r2, r1
    1844:	2108      	movs	r1, #8
    1846:	430a      	orrs	r2, r1
    1848:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    184a:	7b9a      	ldrb	r2, [r3, #14]
    184c:	2103      	movs	r1, #3
    184e:	438a      	bics	r2, r1
    1850:	2102      	movs	r1, #2
    1852:	430a      	orrs	r2, r1
    1854:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1856:	4a0f      	ldr	r2, [pc, #60]	; (1894 <Reset_Handler+0xc4>)
    1858:	6853      	ldr	r3, [r2, #4]
    185a:	2180      	movs	r1, #128	; 0x80
    185c:	430b      	orrs	r3, r1
    185e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1860:	4b0d      	ldr	r3, [pc, #52]	; (1898 <Reset_Handler+0xc8>)
    1862:	4798      	blx	r3
        main();
    1864:	4b0d      	ldr	r3, [pc, #52]	; (189c <Reset_Handler+0xcc>)
    1866:	4798      	blx	r3
    1868:	e7fe      	b.n	1868 <Reset_Handler+0x98>
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	00001f6c 	.word	0x00001f6c
    1870:	20000000 	.word	0x20000000
    1874:	20000014 	.word	0x20000014
    1878:	20000004 	.word	0x20000004
    187c:	20000014 	.word	0x20000014
    1880:	200002c4 	.word	0x200002c4
    1884:	e000ed00 	.word	0xe000ed00
    1888:	00000000 	.word	0x00000000
    188c:	41007000 	.word	0x41007000
    1890:	41004800 	.word	0x41004800
    1894:	41004000 	.word	0x41004000
    1898:	00001d5d 	.word	0x00001d5d
    189c:	00001b21 	.word	0x00001b21

000018a0 <usart_write_callback>:
}

void usart_write_callback(struct usart_module *const usart_module)
{
	//port_pin_toggle_output_level(LED_0_PIN);
}
    18a0:	4770      	bx	lr
	...

000018a4 <usart_read_callback>:
{
    18a4:	b510      	push	{r4, lr}
	 usart_write_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    18a6:	2201      	movs	r2, #1
    18a8:	4903      	ldr	r1, [pc, #12]	; (18b8 <usart_read_callback+0x14>)
    18aa:	4804      	ldr	r0, [pc, #16]	; (18bc <usart_read_callback+0x18>)
    18ac:	4b04      	ldr	r3, [pc, #16]	; (18c0 <usart_read_callback+0x1c>)
    18ae:	4798      	blx	r3
	 guiReady = true;
    18b0:	2201      	movs	r2, #1
    18b2:	4b04      	ldr	r3, [pc, #16]	; (18c4 <usart_read_callback+0x20>)
    18b4:	701a      	strb	r2, [r3, #0]
}
    18b6:	bd10      	pop	{r4, pc}
    18b8:	200000f4 	.word	0x200000f4
    18bc:	200000c0 	.word	0x200000c0
    18c0:	00000fd5 	.word	0x00000fd5
    18c4:	20000001 	.word	0x20000001

000018c8 <configure_usart>:
void configure_usart(void)
{
    18c8:	b530      	push	{r4, r5, lr}
    18ca:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    18cc:	2380      	movs	r3, #128	; 0x80
    18ce:	05db      	lsls	r3, r3, #23
    18d0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    18d2:	2300      	movs	r3, #0
    18d4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    18d6:	22ff      	movs	r2, #255	; 0xff
    18d8:	4669      	mov	r1, sp
    18da:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    18dc:	2200      	movs	r2, #0
    18de:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    18e0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    18e2:	2196      	movs	r1, #150	; 0x96
    18e4:	0189      	lsls	r1, r1, #6
    18e6:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    18e8:	2101      	movs	r1, #1
    18ea:	2024      	movs	r0, #36	; 0x24
    18ec:	466c      	mov	r4, sp
    18ee:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    18f0:	3001      	adds	r0, #1
    18f2:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    18f4:	3125      	adds	r1, #37	; 0x25
    18f6:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    18f8:	3101      	adds	r1, #1
    18fa:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    18fc:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    18fe:	3105      	adds	r1, #5
    1900:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1902:	3101      	adds	r1, #1
    1904:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1906:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1908:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    190a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    190c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    190e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1910:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1912:	2313      	movs	r3, #19
    1914:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1916:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 9600;
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1918:	23c4      	movs	r3, #196	; 0xc4
    191a:	039b      	lsls	r3, r3, #14
    191c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    191e:	2301      	movs	r3, #1
    1920:	425b      	negs	r3, r3
    1922:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1924:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1926:	4b10      	ldr	r3, [pc, #64]	; (1968 <configure_usart+0xa0>)
    1928:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    192a:	4b10      	ldr	r3, [pc, #64]	; (196c <configure_usart+0xa4>)
    192c:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    192e:	4d10      	ldr	r5, [pc, #64]	; (1970 <configure_usart+0xa8>)
    1930:	4c10      	ldr	r4, [pc, #64]	; (1974 <configure_usart+0xac>)
    1932:	466a      	mov	r2, sp
    1934:	4910      	ldr	r1, [pc, #64]	; (1978 <configure_usart+0xb0>)
    1936:	0028      	movs	r0, r5
    1938:	47a0      	blx	r4
    193a:	2800      	cmp	r0, #0
    193c:	d1f9      	bne.n	1932 <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    193e:	4d0c      	ldr	r5, [pc, #48]	; (1970 <configure_usart+0xa8>)
    1940:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1942:	0020      	movs	r0, r4
    1944:	4b0d      	ldr	r3, [pc, #52]	; (197c <configure_usart+0xb4>)
    1946:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1948:	231f      	movs	r3, #31
    194a:	4018      	ands	r0, r3
    194c:	3b1e      	subs	r3, #30
    194e:	4083      	lsls	r3, r0
    1950:	4a0b      	ldr	r2, [pc, #44]	; (1980 <configure_usart+0xb8>)
    1952:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1954:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1956:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1958:	2b00      	cmp	r3, #0
    195a:	d1fc      	bne.n	1956 <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    195c:	6823      	ldr	r3, [r4, #0]
    195e:	2202      	movs	r2, #2
    1960:	4313      	orrs	r3, r2
    1962:	6023      	str	r3, [r4, #0]
	EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {}
	usart_enable(&usart_instance);
}
    1964:	b011      	add	sp, #68	; 0x44
    1966:	bd30      	pop	{r4, r5, pc}
    1968:	000a0003 	.word	0x000a0003
    196c:	000b0003 	.word	0x000b0003
    1970:	200000c0 	.word	0x200000c0
    1974:	00000b11 	.word	0x00000b11
    1978:	42001000 	.word	0x42001000
    197c:	00000ac1 	.word	0x00000ac1
    1980:	e000e100 	.word	0xe000e100

00001984 <configure_usart_callbacks>:
void configure_usart_callbacks(void)
{
    1984:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance,
    1986:	4c08      	ldr	r4, [pc, #32]	; (19a8 <configure_usart_callbacks+0x24>)
    1988:	2200      	movs	r2, #0
    198a:	4908      	ldr	r1, [pc, #32]	; (19ac <configure_usart_callbacks+0x28>)
    198c:	0020      	movs	r0, r4
    198e:	4d08      	ldr	r5, [pc, #32]	; (19b0 <configure_usart_callbacks+0x2c>)
    1990:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    1992:	2201      	movs	r2, #1
    1994:	4907      	ldr	r1, [pc, #28]	; (19b4 <configure_usart_callbacks+0x30>)
    1996:	0020      	movs	r0, r4
    1998:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    199a:	2231      	movs	r2, #49	; 0x31
    199c:	5ca3      	ldrb	r3, [r4, r2]
    199e:	2103      	movs	r1, #3
    19a0:	430b      	orrs	r3, r1
    19a2:	54a3      	strb	r3, [r4, r2]
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance,
	USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    19a4:	bd70      	pop	{r4, r5, r6, pc}
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	200000c0 	.word	0x200000c0
    19ac:	000018a1 	.word	0x000018a1
    19b0:	00000fbd 	.word	0x00000fbd
    19b4:	000018a5 	.word	0x000018a5

000019b8 <configure_adc>:
void configure_adc(void)
{
    19b8:	b510      	push	{r4, lr}
    19ba:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    19bc:	4668      	mov	r0, sp
    19be:	4b10      	ldr	r3, [pc, #64]	; (1a00 <configure_adc+0x48>)
    19c0:	4798      	blx	r3
	adc_init(&adc_instance, ADC, &config_adc);
    19c2:	4c10      	ldr	r4, [pc, #64]	; (1a04 <configure_adc+0x4c>)
    19c4:	466a      	mov	r2, sp
    19c6:	4910      	ldr	r1, [pc, #64]	; (1a08 <configure_adc+0x50>)
    19c8:	0020      	movs	r0, r4
    19ca:	4b10      	ldr	r3, [pc, #64]	; (1a0c <configure_adc+0x54>)
    19cc:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    19ce:	6822      	ldr	r2, [r4, #0]
    19d0:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    19d2:	b25b      	sxtb	r3, r3
    19d4:	2b00      	cmp	r3, #0
    19d6:	dbfb      	blt.n	19d0 <configure_adc+0x18>
    19d8:	2180      	movs	r1, #128	; 0x80
    19da:	0209      	lsls	r1, r1, #8
    19dc:	4b0c      	ldr	r3, [pc, #48]	; (1a10 <configure_adc+0x58>)
    19de:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    19e0:	230f      	movs	r3, #15
    19e2:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    19e4:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    19e6:	7813      	ldrb	r3, [r2, #0]
    19e8:	2102      	movs	r1, #2
    19ea:	430b      	orrs	r3, r1
    19ec:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    19ee:	4b05      	ldr	r3, [pc, #20]	; (1a04 <configure_adc+0x4c>)
    19f0:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    19f2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    19f4:	b25b      	sxtb	r3, r3
    19f6:	2b00      	cmp	r3, #0
    19f8:	dbfb      	blt.n	19f2 <configure_adc+0x3a>
	adc_enable(&adc_instance);
}
    19fa:	b00c      	add	sp, #48	; 0x30
    19fc:	bd10      	pop	{r4, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	00000195 	.word	0x00000195
    1a04:	20000114 	.word	0x20000114
    1a08:	42002000 	.word	0x42002000
    1a0c:	000001dd 	.word	0x000001dd
    1a10:	e000e100 	.word	0xe000e100

00001a14 <start>:
// 		}
	}
}

void start(void)
{
    1a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a16:	46d6      	mov	lr, sl
    1a18:	464f      	mov	r7, r9
    1a1a:	4646      	mov	r6, r8
    1a1c:	b5c0      	push	{r6, r7, lr}
	while(*rx_buffer == 'a' || *rx_buffer == "A")
    1a1e:	4b37      	ldr	r3, [pc, #220]	; (1afc <start+0xe8>)
    1a20:	4698      	mov	r8, r3
	Adc *const adc_module = module_inst->hw;
    1a22:	4b37      	ldr	r3, [pc, #220]	; (1b00 <start+0xec>)
    1a24:	469a      	mov	sl, r3
    1a26:	e048      	b.n	1aba <start+0xa6>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1a28:	420c      	tst	r4, r1
    1a2a:	d113      	bne.n	1a54 <start+0x40>
			//adc_read(&adc_instance, adc_results);
			//if(adc_results > trigger)
			{
				if(del_s == 0)
				{
					for (int i = 0; i < 200 ; i ++ )
    1a2c:	3201      	adds	r2, #1
    1a2e:	2ac8      	cmp	r2, #200	; 0xc8
    1a30:	d028      	beq.n	1a84 <start+0x70>
					{
						adc_read(&adc_instance, mul_results[i]);
    1a32:	0053      	lsls	r3, r2, #1
    1a34:	4649      	mov	r1, r9
    1a36:	5a5b      	ldrh	r3, [r3, r1]
    1a38:	b29b      	uxth	r3, r3
    1a3a:	469c      	mov	ip, r3
	Adc *const adc_module = module_inst->hw;
    1a3c:	6830      	ldr	r0, [r6, #0]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1a3e:	7e03      	ldrb	r3, [r0, #24]
    1a40:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1a42:	0021      	movs	r1, r4
    1a44:	4019      	ands	r1, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1a46:	421f      	tst	r7, r3
    1a48:	d000      	beq.n	1a4c <start+0x38>
		status_flags |= ADC_STATUS_WINDOW;
    1a4a:	4329      	orrs	r1, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1a4c:	421d      	tst	r5, r3
    1a4e:	d0eb      	beq.n	1a28 <start+0x14>
		status_flags |= ADC_STATUS_OVERRUN;
    1a50:	4339      	orrs	r1, r7
    1a52:	e7e9      	b.n	1a28 <start+0x14>
    1a54:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1a56:	b25b      	sxtb	r3, r3
    1a58:	2b00      	cmp	r3, #0
    1a5a:	dbfb      	blt.n	1a54 <start+0x40>
	*result = adc_module->RESULT.reg;
    1a5c:	8b43      	ldrh	r3, [r0, #26]
    1a5e:	4661      	mov	r1, ip
    1a60:	800b      	strh	r3, [r1, #0]
	Adc *const adc_module = module_inst->hw;
    1a62:	4653      	mov	r3, sl
    1a64:	6818      	ldr	r0, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    1a66:	7604      	strb	r4, [r0, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1a68:	7e03      	ldrb	r3, [r0, #24]
    1a6a:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1a6c:	0021      	movs	r1, r4
    1a6e:	4019      	ands	r1, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1a70:	421f      	tst	r7, r3
    1a72:	d000      	beq.n	1a76 <start+0x62>
		status_flags |= ADC_STATUS_WINDOW;
    1a74:	4329      	orrs	r1, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1a76:	421d      	tst	r5, r3
    1a78:	d000      	beq.n	1a7c <start+0x68>
		status_flags |= ADC_STATUS_OVERRUN;
    1a7a:	4339      	orrs	r1, r7
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1a7c:	420f      	tst	r7, r1
    1a7e:	d0d5      	beq.n	1a2c <start+0x18>
	adc_module->INTFLAG.reg = int_flags;
    1a80:	7605      	strb	r5, [r0, #24]
    1a82:	e7d3      	b.n	1a2c <start+0x18>
					}
					if(guiReady)
    1a84:	4b1f      	ldr	r3, [pc, #124]	; (1b04 <start+0xf0>)
    1a86:	781b      	ldrb	r3, [r3, #0]
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d011      	beq.n	1ab0 <start+0x9c>
    1a8c:	2700      	movs	r7, #0
					{
						for(int j = 0 ; j < 200 ; j++)
						{
							guiReady = false;
    1a8e:	4d1d      	ldr	r5, [pc, #116]	; (1b04 <start+0xf0>)
    1a90:	2400      	movs	r4, #0
								unsigned int x=0;
								x=(getNum(mul_results[j]))*16+(getNum(mul_results[j+1]));
    1a92:	4e1d      	ldr	r6, [pc, #116]	; (1b08 <start+0xf4>)
							guiReady = false;
    1a94:	702c      	strb	r4, [r5, #0]
								x=(getNum(mul_results[j]))*16+(getNum(mul_results[j+1]));
    1a96:	007a      	lsls	r2, r7, #1
    1a98:	5b91      	ldrh	r1, [r2, r6]
    1a9a:	3701      	adds	r7, #1
    1a9c:	007b      	lsls	r3, r7, #1
    1a9e:	5b9b      	ldrh	r3, [r3, r6]
							usart_write_buffer_wait(&usart_instance, (uint8_t *)mul_results[j], sizeof(mul_results[j]));
    1aa0:	5b91      	ldrh	r1, [r2, r6]
    1aa2:	b289      	uxth	r1, r1
    1aa4:	2202      	movs	r2, #2
    1aa6:	4819      	ldr	r0, [pc, #100]	; (1b0c <start+0xf8>)
    1aa8:	4b19      	ldr	r3, [pc, #100]	; (1b10 <start+0xfc>)
    1aaa:	4798      	blx	r3
						for(int j = 0 ; j < 200 ; j++)
    1aac:	2fc8      	cmp	r7, #200	; 0xc8
    1aae:	d1f1      	bne.n	1a94 <start+0x80>
// 						guiReady = false;
// 						//usart_write_buffer_wait(&usart_instance, (uint8_t *)mul_results[l], sizeof(mul_results[l]));
// 					}
// 				}		
			}
			usart_read_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    1ab0:	2201      	movs	r2, #1
    1ab2:	4912      	ldr	r1, [pc, #72]	; (1afc <start+0xe8>)
    1ab4:	4815      	ldr	r0, [pc, #84]	; (1b0c <start+0xf8>)
    1ab6:	4b17      	ldr	r3, [pc, #92]	; (1b14 <start+0x100>)
    1ab8:	4798      	blx	r3
	while(*rx_buffer == 'a' || *rx_buffer == "A")
    1aba:	4643      	mov	r3, r8
    1abc:	781b      	ldrb	r3, [r3, #0]
    1abe:	2b61      	cmp	r3, #97	; 0x61
    1ac0:	d005      	beq.n	1ace <start+0xba>
    1ac2:	4b0e      	ldr	r3, [pc, #56]	; (1afc <start+0xe8>)
    1ac4:	781b      	ldrb	r3, [r3, #0]
    1ac6:	b2db      	uxtb	r3, r3
    1ac8:	4a13      	ldr	r2, [pc, #76]	; (1b18 <start+0x104>)
    1aca:	4293      	cmp	r3, r2
    1acc:	d111      	bne.n	1af2 <start+0xde>
		 usart_read_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    1ace:	2201      	movs	r2, #1
    1ad0:	490a      	ldr	r1, [pc, #40]	; (1afc <start+0xe8>)
    1ad2:	480e      	ldr	r0, [pc, #56]	; (1b0c <start+0xf8>)
    1ad4:	4b0f      	ldr	r3, [pc, #60]	; (1b14 <start+0x100>)
    1ad6:	4798      	blx	r3
				if(del_s == 0)
    1ad8:	4b10      	ldr	r3, [pc, #64]	; (1b1c <start+0x108>)
    1ada:	881b      	ldrh	r3, [r3, #0]
    1adc:	b29b      	uxth	r3, r3
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d1e6      	bne.n	1ab0 <start+0x9c>
    1ae2:	2200      	movs	r2, #0
						adc_read(&adc_instance, mul_results[i]);
    1ae4:	4b08      	ldr	r3, [pc, #32]	; (1b08 <start+0xf4>)
    1ae6:	4699      	mov	r9, r3
	Adc *const adc_module = module_inst->hw;
    1ae8:	4e05      	ldr	r6, [pc, #20]	; (1b00 <start+0xec>)
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1aea:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1aec:	2704      	movs	r7, #4
		status_flags |= ADC_STATUS_WINDOW;
    1aee:	2502      	movs	r5, #2
    1af0:	e79f      	b.n	1a32 <start+0x1e>
	}
}
    1af2:	bc1c      	pop	{r2, r3, r4}
    1af4:	4690      	mov	r8, r2
    1af6:	4699      	mov	r9, r3
    1af8:	46a2      	mov	sl, r4
    1afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1afc:	200000f4 	.word	0x200000f4
    1b00:	20000114 	.word	0x20000114
    1b04:	20000001 	.word	0x20000001
    1b08:	20000134 	.word	0x20000134
    1b0c:	200000c0 	.word	0x200000c0
    1b10:	00000e75 	.word	0x00000e75
    1b14:	00000ff5 	.word	0x00000ff5
    1b18:	00001f48 	.word	0x00001f48
    1b1c:	20000060 	.word	0x20000060

00001b20 <main>:
{
    1b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	system_init();
    1b22:	4b23      	ldr	r3, [pc, #140]	; (1bb0 <main+0x90>)
    1b24:	4798      	blx	r3
	configure_usart();
    1b26:	4b23      	ldr	r3, [pc, #140]	; (1bb4 <main+0x94>)
    1b28:	4798      	blx	r3
	configure_usart_callbacks();
    1b2a:	4b23      	ldr	r3, [pc, #140]	; (1bb8 <main+0x98>)
    1b2c:	4798      	blx	r3
	configure_adc();
    1b2e:	4b23      	ldr	r3, [pc, #140]	; (1bbc <main+0x9c>)
    1b30:	4798      	blx	r3
	cpu_irq_enable();
    1b32:	2201      	movs	r2, #1
    1b34:	4b22      	ldr	r3, [pc, #136]	; (1bc0 <main+0xa0>)
    1b36:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1b38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1b3c:	b662      	cpsie	i
	usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    1b3e:	320e      	adds	r2, #14
    1b40:	4920      	ldr	r1, [pc, #128]	; (1bc4 <main+0xa4>)
    1b42:	4821      	ldr	r0, [pc, #132]	; (1bc8 <main+0xa8>)
    1b44:	4b21      	ldr	r3, [pc, #132]	; (1bcc <main+0xac>)
    1b46:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1b48:	4b21      	ldr	r3, [pc, #132]	; (1bd0 <main+0xb0>)
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    1b4e:	b252      	sxtb	r2, r2
    1b50:	2a00      	cmp	r2, #0
    1b52:	dbfb      	blt.n	1b4c <main+0x2c>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1b54:	7b1a      	ldrb	r2, [r3, #12]
    1b56:	2102      	movs	r1, #2
    1b58:	430a      	orrs	r2, r1
    1b5a:	731a      	strb	r2, [r3, #12]
    1b5c:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    1b5e:	b252      	sxtb	r2, r2
    1b60:	2a00      	cmp	r2, #0
    1b62:	dbfb      	blt.n	1b5c <main+0x3c>
		while(del_s >= 0){
    1b64:	4d1b      	ldr	r5, [pc, #108]	; (1bd4 <main+0xb4>)
		usart_read_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    1b66:	4f1c      	ldr	r7, [pc, #112]	; (1bd8 <main+0xb8>)
    1b68:	e009      	b.n	1b7e <main+0x5e>
			default: usart_write_buffer_wait(&usart_instance, (uint8_t *) "HELP!", 5); usart_write_buffer_wait(&usart_instance, (uint8_t *) rx_buffer, MAX_RX_BUFFER_LENGTH); break;
    1b6a:	4e17      	ldr	r6, [pc, #92]	; (1bc8 <main+0xa8>)
    1b6c:	2205      	movs	r2, #5
    1b6e:	491b      	ldr	r1, [pc, #108]	; (1bdc <main+0xbc>)
    1b70:	0030      	movs	r0, r6
    1b72:	4c16      	ldr	r4, [pc, #88]	; (1bcc <main+0xac>)
    1b74:	47a0      	blx	r4
    1b76:	2201      	movs	r2, #1
    1b78:	4917      	ldr	r1, [pc, #92]	; (1bd8 <main+0xb8>)
    1b7a:	0030      	movs	r0, r6
    1b7c:	47a0      	blx	r4
		while(del_s >= 0){
    1b7e:	882b      	ldrh	r3, [r5, #0]
		usart_read_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    1b80:	2201      	movs	r2, #1
    1b82:	0039      	movs	r1, r7
    1b84:	4810      	ldr	r0, [pc, #64]	; (1bc8 <main+0xa8>)
    1b86:	4b16      	ldr	r3, [pc, #88]	; (1be0 <main+0xc0>)
    1b88:	4798      	blx	r3
		switch(*rx_buffer){
    1b8a:	783b      	ldrb	r3, [r7, #0]
    1b8c:	b2db      	uxtb	r3, r3
    1b8e:	2b41      	cmp	r3, #65	; 0x41
    1b90:	d001      	beq.n	1b96 <main+0x76>
    1b92:	2b61      	cmp	r3, #97	; 0x61
    1b94:	d1e9      	bne.n	1b6a <main+0x4a>
			case 'a': usart_write_buffer_wait(&usart_instance, (uint8_t *) "NICE!", 5); start(); usart_write_buffer_wait(&usart_instance, (uint8_t *) "ACK!", 5); break;
    1b96:	4c0c      	ldr	r4, [pc, #48]	; (1bc8 <main+0xa8>)
    1b98:	2205      	movs	r2, #5
    1b9a:	4912      	ldr	r1, [pc, #72]	; (1be4 <main+0xc4>)
    1b9c:	0020      	movs	r0, r4
    1b9e:	4e0b      	ldr	r6, [pc, #44]	; (1bcc <main+0xac>)
    1ba0:	47b0      	blx	r6
    1ba2:	4b11      	ldr	r3, [pc, #68]	; (1be8 <main+0xc8>)
    1ba4:	4798      	blx	r3
    1ba6:	2205      	movs	r2, #5
    1ba8:	4910      	ldr	r1, [pc, #64]	; (1bec <main+0xcc>)
    1baa:	0020      	movs	r0, r4
    1bac:	47b0      	blx	r6
    1bae:	e7e6      	b.n	1b7e <main+0x5e>
    1bb0:	0000171d 	.word	0x0000171d
    1bb4:	000018c9 	.word	0x000018c9
    1bb8:	00001985 	.word	0x00001985
    1bbc:	000019b9 	.word	0x000019b9
    1bc0:	20000000 	.word	0x20000000
    1bc4:	20000004 	.word	0x20000004
    1bc8:	200000c0 	.word	0x200000c0
    1bcc:	00000e75 	.word	0x00000e75
    1bd0:	20000114 	.word	0x20000114
    1bd4:	20000060 	.word	0x20000060
    1bd8:	200000f4 	.word	0x200000f4
    1bdc:	00001f40 	.word	0x00001f40
    1be0:	00000ff5 	.word	0x00000ff5
    1be4:	00001f30 	.word	0x00001f30
    1be8:	00001a15 	.word	0x00001a15
    1bec:	00001f38 	.word	0x00001f38

00001bf0 <__udivsi3>:
    1bf0:	2200      	movs	r2, #0
    1bf2:	0843      	lsrs	r3, r0, #1
    1bf4:	428b      	cmp	r3, r1
    1bf6:	d374      	bcc.n	1ce2 <__udivsi3+0xf2>
    1bf8:	0903      	lsrs	r3, r0, #4
    1bfa:	428b      	cmp	r3, r1
    1bfc:	d35f      	bcc.n	1cbe <__udivsi3+0xce>
    1bfe:	0a03      	lsrs	r3, r0, #8
    1c00:	428b      	cmp	r3, r1
    1c02:	d344      	bcc.n	1c8e <__udivsi3+0x9e>
    1c04:	0b03      	lsrs	r3, r0, #12
    1c06:	428b      	cmp	r3, r1
    1c08:	d328      	bcc.n	1c5c <__udivsi3+0x6c>
    1c0a:	0c03      	lsrs	r3, r0, #16
    1c0c:	428b      	cmp	r3, r1
    1c0e:	d30d      	bcc.n	1c2c <__udivsi3+0x3c>
    1c10:	22ff      	movs	r2, #255	; 0xff
    1c12:	0209      	lsls	r1, r1, #8
    1c14:	ba12      	rev	r2, r2
    1c16:	0c03      	lsrs	r3, r0, #16
    1c18:	428b      	cmp	r3, r1
    1c1a:	d302      	bcc.n	1c22 <__udivsi3+0x32>
    1c1c:	1212      	asrs	r2, r2, #8
    1c1e:	0209      	lsls	r1, r1, #8
    1c20:	d065      	beq.n	1cee <__udivsi3+0xfe>
    1c22:	0b03      	lsrs	r3, r0, #12
    1c24:	428b      	cmp	r3, r1
    1c26:	d319      	bcc.n	1c5c <__udivsi3+0x6c>
    1c28:	e000      	b.n	1c2c <__udivsi3+0x3c>
    1c2a:	0a09      	lsrs	r1, r1, #8
    1c2c:	0bc3      	lsrs	r3, r0, #15
    1c2e:	428b      	cmp	r3, r1
    1c30:	d301      	bcc.n	1c36 <__udivsi3+0x46>
    1c32:	03cb      	lsls	r3, r1, #15
    1c34:	1ac0      	subs	r0, r0, r3
    1c36:	4152      	adcs	r2, r2
    1c38:	0b83      	lsrs	r3, r0, #14
    1c3a:	428b      	cmp	r3, r1
    1c3c:	d301      	bcc.n	1c42 <__udivsi3+0x52>
    1c3e:	038b      	lsls	r3, r1, #14
    1c40:	1ac0      	subs	r0, r0, r3
    1c42:	4152      	adcs	r2, r2
    1c44:	0b43      	lsrs	r3, r0, #13
    1c46:	428b      	cmp	r3, r1
    1c48:	d301      	bcc.n	1c4e <__udivsi3+0x5e>
    1c4a:	034b      	lsls	r3, r1, #13
    1c4c:	1ac0      	subs	r0, r0, r3
    1c4e:	4152      	adcs	r2, r2
    1c50:	0b03      	lsrs	r3, r0, #12
    1c52:	428b      	cmp	r3, r1
    1c54:	d301      	bcc.n	1c5a <__udivsi3+0x6a>
    1c56:	030b      	lsls	r3, r1, #12
    1c58:	1ac0      	subs	r0, r0, r3
    1c5a:	4152      	adcs	r2, r2
    1c5c:	0ac3      	lsrs	r3, r0, #11
    1c5e:	428b      	cmp	r3, r1
    1c60:	d301      	bcc.n	1c66 <__udivsi3+0x76>
    1c62:	02cb      	lsls	r3, r1, #11
    1c64:	1ac0      	subs	r0, r0, r3
    1c66:	4152      	adcs	r2, r2
    1c68:	0a83      	lsrs	r3, r0, #10
    1c6a:	428b      	cmp	r3, r1
    1c6c:	d301      	bcc.n	1c72 <__udivsi3+0x82>
    1c6e:	028b      	lsls	r3, r1, #10
    1c70:	1ac0      	subs	r0, r0, r3
    1c72:	4152      	adcs	r2, r2
    1c74:	0a43      	lsrs	r3, r0, #9
    1c76:	428b      	cmp	r3, r1
    1c78:	d301      	bcc.n	1c7e <__udivsi3+0x8e>
    1c7a:	024b      	lsls	r3, r1, #9
    1c7c:	1ac0      	subs	r0, r0, r3
    1c7e:	4152      	adcs	r2, r2
    1c80:	0a03      	lsrs	r3, r0, #8
    1c82:	428b      	cmp	r3, r1
    1c84:	d301      	bcc.n	1c8a <__udivsi3+0x9a>
    1c86:	020b      	lsls	r3, r1, #8
    1c88:	1ac0      	subs	r0, r0, r3
    1c8a:	4152      	adcs	r2, r2
    1c8c:	d2cd      	bcs.n	1c2a <__udivsi3+0x3a>
    1c8e:	09c3      	lsrs	r3, r0, #7
    1c90:	428b      	cmp	r3, r1
    1c92:	d301      	bcc.n	1c98 <__udivsi3+0xa8>
    1c94:	01cb      	lsls	r3, r1, #7
    1c96:	1ac0      	subs	r0, r0, r3
    1c98:	4152      	adcs	r2, r2
    1c9a:	0983      	lsrs	r3, r0, #6
    1c9c:	428b      	cmp	r3, r1
    1c9e:	d301      	bcc.n	1ca4 <__udivsi3+0xb4>
    1ca0:	018b      	lsls	r3, r1, #6
    1ca2:	1ac0      	subs	r0, r0, r3
    1ca4:	4152      	adcs	r2, r2
    1ca6:	0943      	lsrs	r3, r0, #5
    1ca8:	428b      	cmp	r3, r1
    1caa:	d301      	bcc.n	1cb0 <__udivsi3+0xc0>
    1cac:	014b      	lsls	r3, r1, #5
    1cae:	1ac0      	subs	r0, r0, r3
    1cb0:	4152      	adcs	r2, r2
    1cb2:	0903      	lsrs	r3, r0, #4
    1cb4:	428b      	cmp	r3, r1
    1cb6:	d301      	bcc.n	1cbc <__udivsi3+0xcc>
    1cb8:	010b      	lsls	r3, r1, #4
    1cba:	1ac0      	subs	r0, r0, r3
    1cbc:	4152      	adcs	r2, r2
    1cbe:	08c3      	lsrs	r3, r0, #3
    1cc0:	428b      	cmp	r3, r1
    1cc2:	d301      	bcc.n	1cc8 <__udivsi3+0xd8>
    1cc4:	00cb      	lsls	r3, r1, #3
    1cc6:	1ac0      	subs	r0, r0, r3
    1cc8:	4152      	adcs	r2, r2
    1cca:	0883      	lsrs	r3, r0, #2
    1ccc:	428b      	cmp	r3, r1
    1cce:	d301      	bcc.n	1cd4 <__udivsi3+0xe4>
    1cd0:	008b      	lsls	r3, r1, #2
    1cd2:	1ac0      	subs	r0, r0, r3
    1cd4:	4152      	adcs	r2, r2
    1cd6:	0843      	lsrs	r3, r0, #1
    1cd8:	428b      	cmp	r3, r1
    1cda:	d301      	bcc.n	1ce0 <__udivsi3+0xf0>
    1cdc:	004b      	lsls	r3, r1, #1
    1cde:	1ac0      	subs	r0, r0, r3
    1ce0:	4152      	adcs	r2, r2
    1ce2:	1a41      	subs	r1, r0, r1
    1ce4:	d200      	bcs.n	1ce8 <__udivsi3+0xf8>
    1ce6:	4601      	mov	r1, r0
    1ce8:	4152      	adcs	r2, r2
    1cea:	4610      	mov	r0, r2
    1cec:	4770      	bx	lr
    1cee:	e7ff      	b.n	1cf0 <__udivsi3+0x100>
    1cf0:	b501      	push	{r0, lr}
    1cf2:	2000      	movs	r0, #0
    1cf4:	f000 f806 	bl	1d04 <__aeabi_idiv0>
    1cf8:	bd02      	pop	{r1, pc}
    1cfa:	46c0      	nop			; (mov r8, r8)

00001cfc <__aeabi_uidivmod>:
    1cfc:	2900      	cmp	r1, #0
    1cfe:	d0f7      	beq.n	1cf0 <__udivsi3+0x100>
    1d00:	e776      	b.n	1bf0 <__udivsi3>
    1d02:	4770      	bx	lr

00001d04 <__aeabi_idiv0>:
    1d04:	4770      	bx	lr
    1d06:	46c0      	nop			; (mov r8, r8)

00001d08 <__aeabi_lmul>:
    1d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d0a:	46ce      	mov	lr, r9
    1d0c:	4647      	mov	r7, r8
    1d0e:	0415      	lsls	r5, r2, #16
    1d10:	0c2d      	lsrs	r5, r5, #16
    1d12:	002e      	movs	r6, r5
    1d14:	b580      	push	{r7, lr}
    1d16:	0407      	lsls	r7, r0, #16
    1d18:	0c14      	lsrs	r4, r2, #16
    1d1a:	0c3f      	lsrs	r7, r7, #16
    1d1c:	4699      	mov	r9, r3
    1d1e:	0c03      	lsrs	r3, r0, #16
    1d20:	437e      	muls	r6, r7
    1d22:	435d      	muls	r5, r3
    1d24:	4367      	muls	r7, r4
    1d26:	4363      	muls	r3, r4
    1d28:	197f      	adds	r7, r7, r5
    1d2a:	0c34      	lsrs	r4, r6, #16
    1d2c:	19e4      	adds	r4, r4, r7
    1d2e:	469c      	mov	ip, r3
    1d30:	42a5      	cmp	r5, r4
    1d32:	d903      	bls.n	1d3c <__aeabi_lmul+0x34>
    1d34:	2380      	movs	r3, #128	; 0x80
    1d36:	025b      	lsls	r3, r3, #9
    1d38:	4698      	mov	r8, r3
    1d3a:	44c4      	add	ip, r8
    1d3c:	464b      	mov	r3, r9
    1d3e:	4351      	muls	r1, r2
    1d40:	4343      	muls	r3, r0
    1d42:	0436      	lsls	r6, r6, #16
    1d44:	0c36      	lsrs	r6, r6, #16
    1d46:	0c25      	lsrs	r5, r4, #16
    1d48:	0424      	lsls	r4, r4, #16
    1d4a:	4465      	add	r5, ip
    1d4c:	19a4      	adds	r4, r4, r6
    1d4e:	1859      	adds	r1, r3, r1
    1d50:	1949      	adds	r1, r1, r5
    1d52:	0020      	movs	r0, r4
    1d54:	bc0c      	pop	{r2, r3}
    1d56:	4690      	mov	r8, r2
    1d58:	4699      	mov	r9, r3
    1d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d5c <__libc_init_array>:
    1d5c:	b570      	push	{r4, r5, r6, lr}
    1d5e:	2600      	movs	r6, #0
    1d60:	4d0c      	ldr	r5, [pc, #48]	; (1d94 <__libc_init_array+0x38>)
    1d62:	4c0d      	ldr	r4, [pc, #52]	; (1d98 <__libc_init_array+0x3c>)
    1d64:	1b64      	subs	r4, r4, r5
    1d66:	10a4      	asrs	r4, r4, #2
    1d68:	42a6      	cmp	r6, r4
    1d6a:	d109      	bne.n	1d80 <__libc_init_array+0x24>
    1d6c:	2600      	movs	r6, #0
    1d6e:	f000 f8ed 	bl	1f4c <_init>
    1d72:	4d0a      	ldr	r5, [pc, #40]	; (1d9c <__libc_init_array+0x40>)
    1d74:	4c0a      	ldr	r4, [pc, #40]	; (1da0 <__libc_init_array+0x44>)
    1d76:	1b64      	subs	r4, r4, r5
    1d78:	10a4      	asrs	r4, r4, #2
    1d7a:	42a6      	cmp	r6, r4
    1d7c:	d105      	bne.n	1d8a <__libc_init_array+0x2e>
    1d7e:	bd70      	pop	{r4, r5, r6, pc}
    1d80:	00b3      	lsls	r3, r6, #2
    1d82:	58eb      	ldr	r3, [r5, r3]
    1d84:	4798      	blx	r3
    1d86:	3601      	adds	r6, #1
    1d88:	e7ee      	b.n	1d68 <__libc_init_array+0xc>
    1d8a:	00b3      	lsls	r3, r6, #2
    1d8c:	58eb      	ldr	r3, [r5, r3]
    1d8e:	4798      	blx	r3
    1d90:	3601      	adds	r6, #1
    1d92:	e7f2      	b.n	1d7a <__libc_init_array+0x1e>
    1d94:	00001f58 	.word	0x00001f58
    1d98:	00001f58 	.word	0x00001f58
    1d9c:	00001f58 	.word	0x00001f58
    1da0:	00001f5c 	.word	0x00001f5c

00001da4 <memcpy>:
    1da4:	2300      	movs	r3, #0
    1da6:	b510      	push	{r4, lr}
    1da8:	429a      	cmp	r2, r3
    1daa:	d100      	bne.n	1dae <memcpy+0xa>
    1dac:	bd10      	pop	{r4, pc}
    1dae:	5ccc      	ldrb	r4, [r1, r3]
    1db0:	54c4      	strb	r4, [r0, r3]
    1db2:	3301      	adds	r3, #1
    1db4:	e7f8      	b.n	1da8 <memcpy+0x4>
    1db6:	0000      	movs	r0, r0
    1db8:	000003a6 	.word	0x000003a6
    1dbc:	000005f2 	.word	0x000005f2
    1dc0:	000005f2 	.word	0x000005f2
    1dc4:	000005f2 	.word	0x000005f2
    1dc8:	000005f2 	.word	0x000005f2
    1dcc:	000005f2 	.word	0x000005f2
    1dd0:	000005f2 	.word	0x000005f2
    1dd4:	000005f2 	.word	0x000005f2
    1dd8:	000005f2 	.word	0x000005f2
    1ddc:	000005f2 	.word	0x000005f2
    1de0:	000005f2 	.word	0x000005f2
    1de4:	000005f2 	.word	0x000005f2
    1de8:	000005f2 	.word	0x000005f2
    1dec:	000005f2 	.word	0x000005f2
    1df0:	000005f2 	.word	0x000005f2
    1df4:	000005f2 	.word	0x000005f2
    1df8:	0000038e 	.word	0x0000038e
    1dfc:	000005f2 	.word	0x000005f2
    1e00:	000005f2 	.word	0x000005f2
    1e04:	000005f2 	.word	0x000005f2
    1e08:	000005f2 	.word	0x000005f2
    1e0c:	000005f2 	.word	0x000005f2
    1e10:	000005f2 	.word	0x000005f2
    1e14:	000005f2 	.word	0x000005f2
    1e18:	000005f2 	.word	0x000005f2
    1e1c:	000005f2 	.word	0x000005f2
    1e20:	000005f2 	.word	0x000005f2
    1e24:	000005f2 	.word	0x000005f2
    1e28:	000005f2 	.word	0x000005f2
    1e2c:	000005f2 	.word	0x000005f2
    1e30:	000005f2 	.word	0x000005f2
    1e34:	000005f2 	.word	0x000005f2
    1e38:	0000039e 	.word	0x0000039e
    1e3c:	000005f2 	.word	0x000005f2
    1e40:	000005f2 	.word	0x000005f2
    1e44:	000005f2 	.word	0x000005f2
    1e48:	000005f2 	.word	0x000005f2
    1e4c:	000005f2 	.word	0x000005f2
    1e50:	000005f2 	.word	0x000005f2
    1e54:	000005f2 	.word	0x000005f2
    1e58:	000005f2 	.word	0x000005f2
    1e5c:	000005f2 	.word	0x000005f2
    1e60:	000005f2 	.word	0x000005f2
    1e64:	000005f2 	.word	0x000005f2
    1e68:	000005f2 	.word	0x000005f2
    1e6c:	000005f2 	.word	0x000005f2
    1e70:	000005f2 	.word	0x000005f2
    1e74:	000005f2 	.word	0x000005f2
    1e78:	00000396 	.word	0x00000396
    1e7c:	000003ae 	.word	0x000003ae
    1e80:	00000376 	.word	0x00000376
    1e84:	00000386 	.word	0x00000386
    1e88:	0000037e 	.word	0x0000037e
    1e8c:	00000002 	.word	0x00000002
    1e90:	00000003 	.word	0x00000003
    1e94:	00000004 	.word	0x00000004
    1e98:	00000005 	.word	0x00000005
    1e9c:	00000006 	.word	0x00000006
    1ea0:	00000007 	.word	0x00000007
    1ea4:	0000000e 	.word	0x0000000e
    1ea8:	0000000f 	.word	0x0000000f
    1eac:	0000000a 	.word	0x0000000a
    1eb0:	0000000b 	.word	0x0000000b
    1eb4:	0000ffff 	.word	0x0000ffff
    1eb8:	0000ffff 	.word	0x0000ffff
    1ebc:	0000ffff 	.word	0x0000ffff
    1ec0:	0000ffff 	.word	0x0000ffff
    1ec4:	0000ffff 	.word	0x0000ffff
    1ec8:	0000ffff 	.word	0x0000ffff
    1ecc:	0000ffff 	.word	0x0000ffff
    1ed0:	0000ffff 	.word	0x0000ffff
    1ed4:	0000ffff 	.word	0x0000ffff
    1ed8:	0000ffff 	.word	0x0000ffff
    1edc:	42000800 	.word	0x42000800
    1ee0:	42000c00 	.word	0x42000c00
    1ee4:	42001000 	.word	0x42001000
    1ee8:	000011ba 	.word	0x000011ba
    1eec:	000011b6 	.word	0x000011b6
    1ef0:	000011b6 	.word	0x000011b6
    1ef4:	0000121c 	.word	0x0000121c
    1ef8:	0000121c 	.word	0x0000121c
    1efc:	000011ce 	.word	0x000011ce
    1f00:	000011c0 	.word	0x000011c0
    1f04:	000011d4 	.word	0x000011d4
    1f08:	0000120a 	.word	0x0000120a
    1f0c:	000012a4 	.word	0x000012a4
    1f10:	00001284 	.word	0x00001284
    1f14:	00001284 	.word	0x00001284
    1f18:	00001310 	.word	0x00001310
    1f1c:	00001296 	.word	0x00001296
    1f20:	000012b2 	.word	0x000012b2
    1f24:	00001288 	.word	0x00001288
    1f28:	000012c0 	.word	0x000012c0
    1f2c:	00001300 	.word	0x00001300
    1f30:	4543494e 	.word	0x4543494e
    1f34:	00000021 	.word	0x00000021
    1f38:	214b4341 	.word	0x214b4341
    1f3c:	00000000 	.word	0x00000000
    1f40:	504c4548 	.word	0x504c4548
    1f44:	00000021 	.word	0x00000021
    1f48:	00000041 	.word	0x00000041

00001f4c <_init>:
    1f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f52:	bc08      	pop	{r3}
    1f54:	469e      	mov	lr, r3
    1f56:	4770      	bx	lr

00001f58 <__init_array_start>:
    1f58:	000000b5 	.word	0x000000b5

00001f5c <_fini>:
    1f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f62:	bc08      	pop	{r3}
    1f64:	469e      	mov	lr, r3
    1f66:	4770      	bx	lr

00001f68 <__fini_array_start>:
    1f68:	0000008d 	.word	0x0000008d
